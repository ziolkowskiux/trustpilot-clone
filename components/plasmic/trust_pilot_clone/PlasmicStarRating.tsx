// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: uzL7MLDrNkZiDQaUBve1wf
// Component: a7ppcDbGWwYt

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_trust_pilot_clone.module.css"; // plasmic-import: uzL7MLDrNkZiDQaUBve1wf/projectcss
import sty from "./PlasmicStarRating.module.css"; // plasmic-import: a7ppcDbGWwYt/css

import StarSolidIcon from "./icons/PlasmicIcon__StarSolid"; // plasmic-import: VAVaJQX6lOKe/icon

createPlasmicElementProxy;

export type PlasmicStarRating__VariantMembers = {
  hoverStates: "hover1" | "hover2" | "hover3" | "hover4" | "hover5";
  selectedStates:
    | "selected1"
    | "selected2"
    | "selected3"
    | "selected4"
    | "selected5";
};
export type PlasmicStarRating__VariantsArgs = {
  hoverStates?: MultiChoiceArg<
    "hover1" | "hover2" | "hover3" | "hover4" | "hover5"
  >;
  selectedStates?: MultiChoiceArg<
    "selected1" | "selected2" | "selected3" | "selected4" | "selected5"
  >;
};
type VariantPropType = keyof PlasmicStarRating__VariantsArgs;
export const PlasmicStarRating__VariantProps = new Array<VariantPropType>(
  "hoverStates",
  "selectedStates"
);

export type PlasmicStarRating__ArgsType = {
  onTrustScoreChange?: (val: string) => void;
};
type ArgPropType = keyof PlasmicStarRating__ArgsType;
export const PlasmicStarRating__ArgProps = new Array<ArgPropType>(
  "onTrustScoreChange"
);

export type PlasmicStarRating__OverridesType = {
  starRating?: Flex__<"div">;
  rating1?: Flex__<"button">;
  rating2?: Flex__<"button">;
  rating3?: Flex__<"button">;
  rating4?: Flex__<"button">;
  rating5?: Flex__<"button">;
};

export interface DefaultStarRatingProps {
  onTrustScoreChange?: (val: string) => void;
  hoverStates?: MultiChoiceArg<
    "hover1" | "hover2" | "hover3" | "hover4" | "hover5"
  >;
  selectedStates?: MultiChoiceArg<
    "selected1" | "selected2" | "selected3" | "selected4" | "selected5"
  >;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicStarRating__RenderFunc(props: {
  variants: PlasmicStarRating__VariantsArgs;
  args: PlasmicStarRating__ArgsType;
  overrides: PlasmicStarRating__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "hoverStates",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.hoverStates
      },
      {
        path: "selectedStates",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.selectedStates
      },
      {
        path: "trustScore",
        type: "readonly",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0,

        onChangeProp: "onTrustScoreChange"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"starRating"}
      data-plasmic-override={overrides.starRating}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.starRating,
        {
          [sty.starRatinghoverStates_hover1]: hasVariant(
            $state,
            "hoverStates",
            "hover1"
          ),
          [sty.starRatinghoverStates_hover3]: hasVariant(
            $state,
            "hoverStates",
            "hover3"
          ),
          [sty.starRatinghoverStates_hover4]: hasVariant(
            $state,
            "hoverStates",
            "hover4"
          ),
          [sty.starRatingselectedStates_selected5]: hasVariant(
            $state,
            "selectedStates",
            "selected5"
          )
        }
      )}
      onMouseLeave={async event => {
        const $steps = {};

        $steps["updateUnnamedGroupOfVariants"] = true
          ? (() => {
              const actionArgs = { vgroup: "hoverStates", operation: 1 };
              return (({ vgroup, value }) => {
                if (typeof value === "string") {
                  value = [value];
                }

                $stateSet($state, vgroup, undefined);
                return undefined;
              })?.apply(null, [actionArgs]);
            })()
          : undefined;
        if (
          $steps["updateUnnamedGroupOfVariants"] != null &&
          typeof $steps["updateUnnamedGroupOfVariants"] === "object" &&
          typeof $steps["updateUnnamedGroupOfVariants"].then === "function"
        ) {
          $steps["updateUnnamedGroupOfVariants"] = await $steps[
            "updateUnnamedGroupOfVariants"
          ];
        }
      }}
    >
      <button
        data-plasmic-name={"rating1"}
        data-plasmic-override={overrides.rating1}
        className={classNames(projectcss.all, projectcss.button, sty.rating1, {
          [sty.rating1hoverStates_hover1]: hasVariant(
            $state,
            "hoverStates",
            "hover1"
          ),
          [sty.rating1hoverStates_hover2]: hasVariant(
            $state,
            "hoverStates",
            "hover2"
          ),
          [sty.rating1hoverStates_hover3]: hasVariant(
            $state,
            "hoverStates",
            "hover3"
          ),
          [sty.rating1hoverStates_hover4]: hasVariant(
            $state,
            "hoverStates",
            "hover4"
          ),
          [sty.rating1hoverStates_hover5]: hasVariant(
            $state,
            "hoverStates",
            "hover5"
          ),
          [sty.rating1selectedStates_selected1]: hasVariant(
            $state,
            "selectedStates",
            "selected1"
          ),
          [sty.rating1selectedStates_selected2]: hasVariant(
            $state,
            "selectedStates",
            "selected2"
          ),
          [sty.rating1selectedStates_selected3]: hasVariant(
            $state,
            "selectedStates",
            "selected3"
          ),
          [sty.rating1selectedStates_selected4]: hasVariant(
            $state,
            "selectedStates",
            "selected4"
          ),
          [sty.rating1selectedStates_selected5]: hasVariant(
            $state,
            "selectedStates",
            "selected5"
          )
        })}
        onClick={async event => {
          const $steps = {};

          $steps["updateSelectedStates"] = true
            ? (() => {
                const actionArgs = {
                  vgroup: "selectedStates",
                  operation: 0,
                  value: "selected1"
                };
                return (({ vgroup, value }) => {
                  if (typeof value === "string") {
                    value = [value];
                  }

                  $stateSet($state, vgroup, value);
                  return value;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateSelectedStates"] != null &&
            typeof $steps["updateSelectedStates"] === "object" &&
            typeof $steps["updateSelectedStates"].then === "function"
          ) {
            $steps["updateSelectedStates"] = await $steps[
              "updateSelectedStates"
            ];
          }

          $steps["updateTrustScore"] = true
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["trustScore"]
                  },
                  operation: 0,
                  value: 1
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  $stateSet(objRoot, variablePath, value);
                  return value;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateTrustScore"] != null &&
            typeof $steps["updateTrustScore"] === "object" &&
            typeof $steps["updateTrustScore"].then === "function"
          ) {
            $steps["updateTrustScore"] = await $steps["updateTrustScore"];
          }
        }}
        onMouseOver={async event => {
          const $steps = {};

          $steps["updateHovering1"] = true
            ? (() => {
                const actionArgs = {
                  vgroup: "hoverStates",
                  operation: 0,
                  value: "hover1"
                };
                return (({ vgroup, value }) => {
                  if (typeof value === "string") {
                    value = [value];
                  }

                  $stateSet($state, vgroup, value);
                  return value;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateHovering1"] != null &&
            typeof $steps["updateHovering1"] === "object" &&
            typeof $steps["updateHovering1"].then === "function"
          ) {
            $steps["updateHovering1"] = await $steps["updateHovering1"];
          }
        }}
        ref={ref => {
          $refs["rating1"] = ref;
        }}
        type={"button"}
      >
        <StarSolidIcon
          className={classNames(projectcss.all, sty.svg__brHh8, {
            [sty.svghoverStates_hover3__brHh8SRtny]: hasVariant(
              $state,
              "hoverStates",
              "hover3"
            )
          })}
          role={"img"}
        />
      </button>
      <button
        data-plasmic-name={"rating2"}
        data-plasmic-override={overrides.rating2}
        className={classNames(projectcss.all, projectcss.button, sty.rating2, {
          [sty.rating2hoverStates_hover1]: hasVariant(
            $state,
            "hoverStates",
            "hover1"
          ),
          [sty.rating2hoverStates_hover2]: hasVariant(
            $state,
            "hoverStates",
            "hover2"
          ),
          [sty.rating2hoverStates_hover3]: hasVariant(
            $state,
            "hoverStates",
            "hover3"
          ),
          [sty.rating2hoverStates_hover4]: hasVariant(
            $state,
            "hoverStates",
            "hover4"
          ),
          [sty.rating2hoverStates_hover5]: hasVariant(
            $state,
            "hoverStates",
            "hover5"
          ),
          [sty.rating2selectedStates_selected2]: hasVariant(
            $state,
            "selectedStates",
            "selected2"
          ),
          [sty.rating2selectedStates_selected3]: hasVariant(
            $state,
            "selectedStates",
            "selected3"
          ),
          [sty.rating2selectedStates_selected4]: hasVariant(
            $state,
            "selectedStates",
            "selected4"
          ),
          [sty.rating2selectedStates_selected5]: hasVariant(
            $state,
            "selectedStates",
            "selected5"
          )
        })}
        onClick={async event => {
          const $steps = {};

          $steps["updateSelectedStates"] = true
            ? (() => {
                const actionArgs = {
                  vgroup: "selectedStates",
                  operation: 0,
                  value: "selected2"
                };
                return (({ vgroup, value }) => {
                  if (typeof value === "string") {
                    value = [value];
                  }

                  $stateSet($state, vgroup, value);
                  return value;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateSelectedStates"] != null &&
            typeof $steps["updateSelectedStates"] === "object" &&
            typeof $steps["updateSelectedStates"].then === "function"
          ) {
            $steps["updateSelectedStates"] = await $steps[
              "updateSelectedStates"
            ];
          }

          $steps["updateTrustScore"] = true
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["trustScore"]
                  },
                  operation: 0,
                  value: 2
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  $stateSet(objRoot, variablePath, value);
                  return value;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateTrustScore"] != null &&
            typeof $steps["updateTrustScore"] === "object" &&
            typeof $steps["updateTrustScore"].then === "function"
          ) {
            $steps["updateTrustScore"] = await $steps["updateTrustScore"];
          }
        }}
        onMouseOver={async event => {
          const $steps = {};

          $steps["updateUnnamedGroupOfVariants"] = true
            ? (() => {
                const actionArgs = {
                  vgroup: "hoverStates",
                  operation: 0,
                  value: "hover2"
                };
                return (({ vgroup, value }) => {
                  if (typeof value === "string") {
                    value = [value];
                  }

                  $stateSet($state, vgroup, value);
                  return value;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateUnnamedGroupOfVariants"] != null &&
            typeof $steps["updateUnnamedGroupOfVariants"] === "object" &&
            typeof $steps["updateUnnamedGroupOfVariants"].then === "function"
          ) {
            $steps["updateUnnamedGroupOfVariants"] = await $steps[
              "updateUnnamedGroupOfVariants"
            ];
          }
        }}
        ref={ref => {
          $refs["rating2"] = ref;
        }}
        type={"button"}
      >
        <StarSolidIcon
          className={classNames(projectcss.all, sty.svg__l33H3, {
            [sty.svghoverStates_hover2__l33H3OYuGx]: hasVariant(
              $state,
              "hoverStates",
              "hover2"
            ),
            [sty.svgselectedStates_selected2__l33H3Pxlep]: hasVariant(
              $state,
              "selectedStates",
              "selected2"
            )
          })}
          role={"img"}
        />
      </button>
      <button
        data-plasmic-name={"rating3"}
        data-plasmic-override={overrides.rating3}
        className={classNames(projectcss.all, projectcss.button, sty.rating3, {
          [sty.rating3hoverStates_hover3]: hasVariant(
            $state,
            "hoverStates",
            "hover3"
          ),
          [sty.rating3hoverStates_hover4]: hasVariant(
            $state,
            "hoverStates",
            "hover4"
          ),
          [sty.rating3hoverStates_hover5]: hasVariant(
            $state,
            "hoverStates",
            "hover5"
          ),
          [sty.rating3selectedStates_selected3]: hasVariant(
            $state,
            "selectedStates",
            "selected3"
          ),
          [sty.rating3selectedStates_selected4]: hasVariant(
            $state,
            "selectedStates",
            "selected4"
          ),
          [sty.rating3selectedStates_selected5]: hasVariant(
            $state,
            "selectedStates",
            "selected5"
          )
        })}
        onClick={async event => {
          const $steps = {};

          $steps["updateSelectedStates"] = true
            ? (() => {
                const actionArgs = {
                  vgroup: "selectedStates",
                  operation: 0,
                  value: "selected3"
                };
                return (({ vgroup, value }) => {
                  if (typeof value === "string") {
                    value = [value];
                  }

                  $stateSet($state, vgroup, value);
                  return value;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateSelectedStates"] != null &&
            typeof $steps["updateSelectedStates"] === "object" &&
            typeof $steps["updateSelectedStates"].then === "function"
          ) {
            $steps["updateSelectedStates"] = await $steps[
              "updateSelectedStates"
            ];
          }

          $steps["updateTrustScore"] = true
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["trustScore"]
                  },
                  operation: 0,
                  value: 3
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  $stateSet(objRoot, variablePath, value);
                  return value;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateTrustScore"] != null &&
            typeof $steps["updateTrustScore"] === "object" &&
            typeof $steps["updateTrustScore"].then === "function"
          ) {
            $steps["updateTrustScore"] = await $steps["updateTrustScore"];
          }
        }}
        onMouseOver={async event => {
          const $steps = {};

          $steps["updateHoverStates"] = true
            ? (() => {
                const actionArgs = {
                  vgroup: "hoverStates",
                  operation: 0,
                  value: "hover3"
                };
                return (({ vgroup, value }) => {
                  if (typeof value === "string") {
                    value = [value];
                  }

                  $stateSet($state, vgroup, value);
                  return value;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateHoverStates"] != null &&
            typeof $steps["updateHoverStates"] === "object" &&
            typeof $steps["updateHoverStates"].then === "function"
          ) {
            $steps["updateHoverStates"] = await $steps["updateHoverStates"];
          }
        }}
        ref={ref => {
          $refs["rating3"] = ref;
        }}
        type={"button"}
      >
        <StarSolidIcon
          className={classNames(projectcss.all, sty.svg__wtDxq, {
            [sty.svghoverStates_hover3__wtDxQsRtny]: hasVariant(
              $state,
              "hoverStates",
              "hover3"
            ),
            [sty.svghoverStates_hover4__wtDxqrz2Di]: hasVariant(
              $state,
              "hoverStates",
              "hover4"
            )
          })}
          role={"img"}
        />
      </button>
      <button
        data-plasmic-name={"rating4"}
        data-plasmic-override={overrides.rating4}
        className={classNames(projectcss.all, projectcss.button, sty.rating4, {
          [sty.rating4hoverStates_hover4]: hasVariant(
            $state,
            "hoverStates",
            "hover4"
          ),
          [sty.rating4hoverStates_hover5]: hasVariant(
            $state,
            "hoverStates",
            "hover5"
          ),
          [sty.rating4selectedStates_selected4]: hasVariant(
            $state,
            "selectedStates",
            "selected4"
          ),
          [sty.rating4selectedStates_selected5]: hasVariant(
            $state,
            "selectedStates",
            "selected5"
          )
        })}
        onClick={async event => {
          const $steps = {};

          $steps["updateSelectedStates"] = true
            ? (() => {
                const actionArgs = {
                  vgroup: "selectedStates",
                  operation: 0,
                  value: "selected4"
                };
                return (({ vgroup, value }) => {
                  if (typeof value === "string") {
                    value = [value];
                  }

                  $stateSet($state, vgroup, value);
                  return value;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateSelectedStates"] != null &&
            typeof $steps["updateSelectedStates"] === "object" &&
            typeof $steps["updateSelectedStates"].then === "function"
          ) {
            $steps["updateSelectedStates"] = await $steps[
              "updateSelectedStates"
            ];
          }

          $steps["updateTrustScore"] = true
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["trustScore"]
                  },
                  operation: 0,
                  value: 4
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  $stateSet(objRoot, variablePath, value);
                  return value;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateTrustScore"] != null &&
            typeof $steps["updateTrustScore"] === "object" &&
            typeof $steps["updateTrustScore"].then === "function"
          ) {
            $steps["updateTrustScore"] = await $steps["updateTrustScore"];
          }
        }}
        onMouseOver={async event => {
          const $steps = {};

          $steps["updateHoverStates"] = true
            ? (() => {
                const actionArgs = {
                  vgroup: "hoverStates",
                  operation: 0,
                  value: "hover4"
                };
                return (({ vgroup, value }) => {
                  if (typeof value === "string") {
                    value = [value];
                  }

                  $stateSet($state, vgroup, value);
                  return value;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateHoverStates"] != null &&
            typeof $steps["updateHoverStates"] === "object" &&
            typeof $steps["updateHoverStates"].then === "function"
          ) {
            $steps["updateHoverStates"] = await $steps["updateHoverStates"];
          }
        }}
        ref={ref => {
          $refs["rating4"] = ref;
        }}
        type={"button"}
      >
        <StarSolidIcon
          className={classNames(projectcss.all, sty.svg__vE2YS)}
          role={"img"}
        />
      </button>
      <button
        data-plasmic-name={"rating5"}
        data-plasmic-override={overrides.rating5}
        className={classNames(projectcss.all, projectcss.button, sty.rating5, {
          [sty.rating5hoverStates_hover5]: hasVariant(
            $state,
            "hoverStates",
            "hover5"
          ),
          [sty.rating5selectedStates_selected5]: hasVariant(
            $state,
            "selectedStates",
            "selected5"
          )
        })}
        onClick={async event => {
          const $steps = {};

          $steps["updateSelectedStates"] = true
            ? (() => {
                const actionArgs = {
                  vgroup: "selectedStates",
                  operation: 0,
                  value: "selected5"
                };
                return (({ vgroup, value }) => {
                  if (typeof value === "string") {
                    value = [value];
                  }

                  $stateSet($state, vgroup, value);
                  return value;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateSelectedStates"] != null &&
            typeof $steps["updateSelectedStates"] === "object" &&
            typeof $steps["updateSelectedStates"].then === "function"
          ) {
            $steps["updateSelectedStates"] = await $steps[
              "updateSelectedStates"
            ];
          }

          $steps["updateTrustScore"] = true
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["trustScore"]
                  },
                  operation: 0,
                  value: 5
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  $stateSet(objRoot, variablePath, value);
                  return value;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateTrustScore"] != null &&
            typeof $steps["updateTrustScore"] === "object" &&
            typeof $steps["updateTrustScore"].then === "function"
          ) {
            $steps["updateTrustScore"] = await $steps["updateTrustScore"];
          }
        }}
        onMouseOver={async event => {
          const $steps = {};

          $steps["updateHoverStates"] = true
            ? (() => {
                const actionArgs = {
                  vgroup: "hoverStates",
                  operation: 5,
                  value: "hover5"
                };
                return (({ vgroup, value }) => {
                  if (typeof value === "string") {
                    value = [value];
                  }

                  let activeVariants = $stateGet($state, vgroup) ?? [];
                  if (typeof activeVariants === "string") {
                    activeVariants = [activeVariants];
                  }
                  for (const variant of value) {
                    if (!activeVariants.includes(variant)) {
                      activeVariants.push(variant);
                    }
                  }
                  $stateSet($state, vgroup, activeVariants);
                  return activeVariants;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateHoverStates"] != null &&
            typeof $steps["updateHoverStates"] === "object" &&
            typeof $steps["updateHoverStates"].then === "function"
          ) {
            $steps["updateHoverStates"] = await $steps["updateHoverStates"];
          }
        }}
        ref={ref => {
          $refs["rating5"] = ref;
        }}
        type={"button"}
      >
        <StarSolidIcon
          className={classNames(projectcss.all, sty.svg__f6Npf)}
          role={"img"}
        />
      </button>
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  starRating: [
    "starRating",
    "rating1",
    "rating2",
    "rating3",
    "rating4",
    "rating5"
  ],
  rating1: ["rating1"],
  rating2: ["rating2"],
  rating3: ["rating3"],
  rating4: ["rating4"],
  rating5: ["rating5"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  starRating: "div";
  rating1: "button";
  rating2: "button";
  rating3: "button";
  rating4: "button";
  rating5: "button";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicStarRating__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicStarRating__VariantsArgs;
    args?: PlasmicStarRating__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicStarRating__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicStarRating__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicStarRating__ArgProps,
          internalVariantPropNames: PlasmicStarRating__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicStarRating__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "starRating") {
    func.displayName = "PlasmicStarRating";
  } else {
    func.displayName = `PlasmicStarRating.${nodeName}`;
  }
  return func;
}

export const PlasmicStarRating = Object.assign(
  // Top-level PlasmicStarRating renders the root element
  makeNodeComponent("starRating"),
  {
    // Helper components rendering sub-elements
    rating1: makeNodeComponent("rating1"),
    rating2: makeNodeComponent("rating2"),
    rating3: makeNodeComponent("rating3"),
    rating4: makeNodeComponent("rating4"),
    rating5: makeNodeComponent("rating5"),

    // Metadata about props expected for PlasmicStarRating
    internalVariantProps: PlasmicStarRating__VariantProps,
    internalArgProps: PlasmicStarRating__ArgProps
  }
);

export default PlasmicStarRating;
/* prettier-ignore-end */
