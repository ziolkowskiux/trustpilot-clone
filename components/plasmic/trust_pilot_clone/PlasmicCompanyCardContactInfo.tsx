// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: uzL7MLDrNkZiDQaUBve1wf
// Component: u5SO6SlWaMIn

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { AntdTooltip } from "@plasmicpkgs/antd5/skinny/registerTooltip";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_trust_pilot_clone.module.css"; // plasmic-import: uzL7MLDrNkZiDQaUBve1wf/projectcss
import sty from "./PlasmicCompanyCardContactInfo.module.css"; // plasmic-import: u5SO6SlWaMIn/css

import GlobeIcon from "./icons/PlasmicIcon__Globe"; // plasmic-import: 49XzuP5DaIX3/icon
import EnvelopeIcon from "./icons/PlasmicIcon__Envelope"; // plasmic-import: 1SYqIJsiKEU-/icon
import PhoneIcon from "./icons/PlasmicIcon__Phone"; // plasmic-import: pPiXuClYZ4wy/icon

createPlasmicElementProxy;

export type PlasmicCompanyCardContactInfo__VariantMembers = {};
export type PlasmicCompanyCardContactInfo__VariantsArgs = {};
type VariantPropType = keyof PlasmicCompanyCardContactInfo__VariantsArgs;
export const PlasmicCompanyCardContactInfo__VariantProps =
  new Array<VariantPropType>();

export type PlasmicCompanyCardContactInfo__ArgsType = {
  companyPhone?: string;
  companyAddress?: string;
  companyEmail?: string;
  companyWebsite?: string;
};
type ArgPropType = keyof PlasmicCompanyCardContactInfo__ArgsType;
export const PlasmicCompanyCardContactInfo__ArgProps = new Array<ArgPropType>(
  "companyPhone",
  "companyAddress",
  "companyEmail",
  "companyWebsite"
);

export type PlasmicCompanyCardContactInfo__OverridesType = {
  basicInfo?: p.Flex<"button">;
  website?: p.Flex<"svg">;
  mail?: p.Flex<"svg">;
  phone?: p.Flex<"svg">;
  tooltip?: p.Flex<typeof AntdTooltip>;
  header?: p.Flex<"div">;
  text?: p.Flex<"div">;
  websiteAddress?: p.Flex<"div">;
  emailAddress?: p.Flex<"div">;
  emailAddressValue?: p.Flex<"a"> & Partial<LinkProps>;
  phoneNumber?: p.Flex<"div">;
  physicalAddress?: p.Flex<"div">;
  physicalAddressValue?: p.Flex<"div">;
};

export interface DefaultCompanyCardContactInfoProps {
  companyPhone?: string;
  companyAddress?: string;
  companyEmail?: string;
  companyWebsite?: string;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicCompanyCardContactInfo__RenderFunc(props: {
  variants: PlasmicCompanyCardContactInfo__VariantsArgs;
  args: PlasmicCompanyCardContactInfo__ArgsType;
  overrides: PlasmicCompanyCardContactInfo__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          companyAddress: "2020 Happy Street, 99207 Spokane United States",
          companyEmail: "testeruser@o2.pl",
          companyWebsite: "https://www.google.pl"
        },
        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const [isBasicInfoFocusWithin, triggerBasicInfoFocusWithinProps] = useTrigger(
    "useFocusedWithin",
    {}
  );
  const triggers = {
    focusWithin_basicInfo: isBasicInfoFocusWithin
  };

  return (
    <p.Stack
      as={"button"}
      data-plasmic-name={"basicInfo"}
      data-plasmic-override={overrides.basicInfo}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.button,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.basicInfo
      )}
      ref={ref => {
        $refs["basicInfo"] = ref;
      }}
      data-plasmic-trigger-props={[triggerBasicInfoFocusWithinProps]}
    >
      {(() => {
        try {
          return $props.companyWebsite ? true : false;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return true;
          }
          throw e;
        }
      })() ? (
        <GlobeIcon
          data-plasmic-name={"website"}
          data-plasmic-override={overrides.website}
          className={classNames(projectcss.all, sty.website)}
          role={"img"}
        />
      ) : null}
      {(() => {
        try {
          return $props.companyEmail ? true : false;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return true;
          }
          throw e;
        }
      })() ? (
        <EnvelopeIcon
          data-plasmic-name={"mail"}
          data-plasmic-override={overrides.mail}
          className={classNames(projectcss.all, sty.mail)}
          role={"img"}
        />
      ) : null}
      {(() => {
        try {
          return $props.companyPhone ? true : false;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return true;
          }
          throw e;
        }
      })() ? (
        <PhoneIcon
          data-plasmic-name={"phone"}
          data-plasmic-override={overrides.phone}
          className={classNames(projectcss.all, sty.phone)}
          role={"img"}
        />
      ) : null}
      <AntdTooltip
        data-plasmic-name={"tooltip"}
        data-plasmic-override={overrides.tooltip}
        className={classNames("__wab_instance", sty.tooltip)}
        titleText={"Tooltip contents"}
      >
        <div
          data-plasmic-name={"header"}
          data-plasmic-override={overrides.header}
          className={classNames(projectcss.all, sty.header)}
        >
          <div
            data-plasmic-name={"text"}
            data-plasmic-override={overrides.text}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text
            )}
          >
            {"Contact"}
          </div>
        </div>
        {(
          triggers.focusWithin_basicInfo
            ? (() => {
                try {
                  return $props.companyWebsite ? true : false;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })()
            : (() => {
                try {
                  return $props.companyWebsite ? true : false;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })()
        ) ? (
          <p.Stack
            as={"div"}
            data-plasmic-name={"websiteAddress"}
            data-plasmic-override={overrides.websiteAddress}
            hasGap={true}
            className={classNames(projectcss.all, sty.websiteAddress)}
          >
            <GlobeIcon
              className={classNames(projectcss.all, sty.svg__khXwd)}
              role={"img"}
            />

            <p.PlasmicLink
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link___5UdN2
              )}
              component={Link}
              href={(() => {
                try {
                  return $props.companyWebsite;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "https://www.plasmic.app/";
                  }
                  throw e;
                }
              })()}
              platform={"nextjs"}
              target={"_blank"}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $props.companyWebsite;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "Some link text";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </p.PlasmicLink>
          </p.Stack>
        ) : null}
        {(
          triggers.focusWithin_basicInfo
            ? (() => {
                try {
                  return $props.companyEmail ? true : false;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })()
            : (() => {
                try {
                  return $props.companyEmail ? true : false;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })()
        ) ? (
          <p.Stack
            as={"div"}
            data-plasmic-name={"emailAddress"}
            data-plasmic-override={overrides.emailAddress}
            hasGap={true}
            className={classNames(projectcss.all, sty.emailAddress)}
          >
            <EnvelopeIcon
              className={classNames(projectcss.all, sty.svg__n5Dj8)}
              role={"img"}
            />

            <p.PlasmicLink
              data-plasmic-name={"emailAddressValue"}
              data-plasmic-override={overrides.emailAddressValue}
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.emailAddressValue
              )}
              component={Link}
              href={(() => {
                try {
                  return "mailto:".concat($props.companyEmail);
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "https://www.plasmic.app/";
                  }
                  throw e;
                }
              })()}
              platform={"nextjs"}
              target={"_blank"}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $props.companyEmail;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "Some link text";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </p.PlasmicLink>
          </p.Stack>
        ) : null}
        {(() => {
          try {
            return $props.companyPhone ? true : false;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return true;
            }
            throw e;
          }
        })() ? (
          <p.Stack
            as={"div"}
            data-plasmic-name={"phoneNumber"}
            data-plasmic-override={overrides.phoneNumber}
            hasGap={true}
            className={classNames(projectcss.all, sty.phoneNumber)}
          >
            <PhoneIcon
              className={classNames(projectcss.all, sty.svg__zjhou)}
              role={"img"}
            />

            <p.PlasmicLink
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__xnOPr
              )}
              component={Link}
              href={(() => {
                try {
                  return "callto:".concat($props.companyPhone);
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "https://www.plasmic.app/";
                  }
                  throw e;
                }
              })()}
              platform={"nextjs"}
              target={"_blank"}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $props.companyPhone;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "Some link text";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </p.PlasmicLink>
          </p.Stack>
        ) : null}
        {(() => {
          try {
            return $props.companyAddress ? true : false;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return true;
            }
            throw e;
          }
        })() ? (
          <p.Stack
            as={"div"}
            data-plasmic-name={"physicalAddress"}
            data-plasmic-override={overrides.physicalAddress}
            hasGap={true}
            className={classNames(projectcss.all, sty.physicalAddress)}
          >
            <GlobeIcon
              className={classNames(projectcss.all, sty.svg__vDnWk)}
              role={"img"}
            />

            <div
              data-plasmic-name={"physicalAddressValue"}
              data-plasmic-override={overrides.physicalAddressValue}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.physicalAddressValue
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $props.companyAddress;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "Contact";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          </p.Stack>
        ) : null}
      </AntdTooltip>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  basicInfo: [
    "basicInfo",
    "website",
    "mail",
    "phone",
    "tooltip",
    "header",
    "text",
    "websiteAddress",
    "emailAddress",
    "emailAddressValue",
    "phoneNumber",
    "physicalAddress",
    "physicalAddressValue"
  ],
  website: ["website"],
  mail: ["mail"],
  phone: ["phone"],
  tooltip: [
    "tooltip",
    "header",
    "text",
    "websiteAddress",
    "emailAddress",
    "emailAddressValue",
    "phoneNumber",
    "physicalAddress",
    "physicalAddressValue"
  ],
  header: ["header", "text"],
  text: ["text"],
  websiteAddress: ["websiteAddress"],
  emailAddress: ["emailAddress", "emailAddressValue"],
  emailAddressValue: ["emailAddressValue"],
  phoneNumber: ["phoneNumber"],
  physicalAddress: ["physicalAddress", "physicalAddressValue"],
  physicalAddressValue: ["physicalAddressValue"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  basicInfo: "button";
  website: "svg";
  mail: "svg";
  phone: "svg";
  tooltip: typeof AntdTooltip;
  header: "div";
  text: "div";
  websiteAddress: "div";
  emailAddress: "div";
  emailAddressValue: "a";
  phoneNumber: "div";
  physicalAddress: "div";
  physicalAddressValue: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCompanyCardContactInfo__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCompanyCardContactInfo__VariantsArgs;
    args?: PlasmicCompanyCardContactInfo__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCompanyCardContactInfo__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicCompanyCardContactInfo__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCompanyCardContactInfo__ArgProps,
          internalVariantPropNames: PlasmicCompanyCardContactInfo__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCompanyCardContactInfo__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "basicInfo") {
    func.displayName = "PlasmicCompanyCardContactInfo";
  } else {
    func.displayName = `PlasmicCompanyCardContactInfo.${nodeName}`;
  }
  return func;
}

export const PlasmicCompanyCardContactInfo = Object.assign(
  // Top-level PlasmicCompanyCardContactInfo renders the root element
  makeNodeComponent("basicInfo"),
  {
    // Helper components rendering sub-elements
    website: makeNodeComponent("website"),
    mail: makeNodeComponent("mail"),
    phone: makeNodeComponent("phone"),
    tooltip: makeNodeComponent("tooltip"),
    header: makeNodeComponent("header"),
    text: makeNodeComponent("text"),
    websiteAddress: makeNodeComponent("websiteAddress"),
    emailAddress: makeNodeComponent("emailAddress"),
    emailAddressValue: makeNodeComponent("emailAddressValue"),
    phoneNumber: makeNodeComponent("phoneNumber"),
    physicalAddress: makeNodeComponent("physicalAddress"),
    physicalAddressValue: makeNodeComponent("physicalAddressValue"),

    // Metadata about props expected for PlasmicCompanyCardContactInfo
    internalVariantProps: PlasmicCompanyCardContactInfo__VariantProps,
    internalArgProps: PlasmicCompanyCardContactInfo__ArgProps
  }
);

export default PlasmicCompanyCardContactInfo;
/* prettier-ignore-end */
