// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: uzL7MLDrNkZiDQaUBve1wf
// Component: VNfHtFia-qE2

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import MainNavigation from "../../MainNavigation"; // plasmic-import: yAd4Bu3qCA/component
import StarRating from "../../StarRating"; // plasmic-import: a7ppcDbGWwYt/component
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_trust_pilot_clone.module.css"; // plasmic-import: uzL7MLDrNkZiDQaUBve1wf/projectcss
import sty from "./PlasmicEvaluate.module.css"; // plasmic-import: VNfHtFia-qE2/css

createPlasmicElementProxy;

export type PlasmicEvaluate__VariantMembers = {};
export type PlasmicEvaluate__VariantsArgs = {};
type VariantPropType = keyof PlasmicEvaluate__VariantsArgs;
export const PlasmicEvaluate__VariantProps = new Array<VariantPropType>();

export type PlasmicEvaluate__ArgsType = {};
type ArgPropType = keyof PlasmicEvaluate__ArgsType;
export const PlasmicEvaluate__ArgProps = new Array<ArgPropType>();

export type PlasmicEvaluate__OverridesType = {
  root?: p.Flex<"div">;
  mainNavigation?: p.Flex<typeof MainNavigation>;
  header?: p.Flex<"div">;
  companyInfo?: p.Flex<"div">;
  companyLogo?: p.Flex<typeof p.PlasmicImg>;
  freeBox?: p.Flex<"div">;
  companyName?: p.Flex<"div">;
  companyWebsite?: p.Flex<"div">;
  userReview?: p.Flex<"form">;
  rateYourExperience?: p.Flex<"div">;
  label?: p.Flex<"label">;
  starRating?: p.Flex<typeof StarRating>;
  review?: p.Flex<"div">;
  label2?: p.Flex<"label">;
  linkGuidelines?: p.Flex<"a"> & Partial<LinkProps>;
  reviewContent?: p.Flex<"textarea">;
  linkHowToWrite?: p.Flex<"a"> & Partial<LinkProps>;
  reviewTitle?: p.Flex<"div">;
  reviewTitle2?: p.Flex<typeof AntdInput>;
  dateOfExperience?: p.Flex<"div">;
  date?: p.Flex<typeof AntdInput>;
  attachments?: p.Flex<"div">;
  header2?: p.Flex<"label">;
  description?: p.Flex<"div">;
  submitAttachment?: p.Flex<typeof AntdButton>;
  submitReview?: p.Flex<"div">;
  button?: p.Flex<typeof AntdButton>;
};

export interface DefaultEvaluateProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicEvaluate__RenderFunc(props: {
  variants: PlasmicEvaluate__VariantsArgs;
  args: PlasmicEvaluate__ArgsType;
  overrides: PlasmicEvaluate__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof p.useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "reviewTitle2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: p.generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "reviewContent.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "date.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: p.generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "starRating.trustScore",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    fetchCompany: usePlasmicDataOp(() => {
      return {
        sourceId: "czoZTBwvV8zZJLNVxj78Sv",
        opId: "01dbb939-6ba7-4ada-b18d-fed02d430db0",
        userArgs: {
          keys: [$ctx.params.company]
        },
        cacheKey: `plasmic.$.01dbb939-6ba7-4ada-b18d-fed02d430db0.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <MainNavigation
            data-plasmic-name={"mainNavigation"}
            data-plasmic-override={overrides.mainNavigation}
            className={classNames("__wab_instance", sty.mainNavigation)}
          />

          <div
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames(projectcss.all, sty.header)}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"companyInfo"}
              data-plasmic-override={overrides.companyInfo}
              hasGap={true}
              className={classNames(projectcss.all, sty.companyInfo)}
            >
              <p.PlasmicImg
                data-plasmic-name={"companyLogo"}
                data-plasmic-override={overrides.companyLogo}
                alt={""}
                className={classNames(sty.companyLogo)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                loading={"lazy"}
              />

              <div
                data-plasmic-name={"freeBox"}
                data-plasmic-override={overrides.freeBox}
                className={classNames(projectcss.all, sty.freeBox)}
              >
                <div
                  data-plasmic-name={"companyName"}
                  data-plasmic-override={overrides.companyName}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.companyName
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $queries.fetchCompany.data[0].name;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "Company name";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
                <div
                  data-plasmic-name={"companyWebsite"}
                  data-plasmic-override={overrides.companyWebsite}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.companyWebsite
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $queries.fetchCompany.data[0].website_url;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "www.google.pl";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </div>
            </p.Stack>
          </div>
          <p.Stack
            as={"form"}
            data-plasmic-name={"userReview"}
            data-plasmic-override={overrides.userReview}
            hasGap={true}
            className={classNames(projectcss.all, sty.userReview)}
          >
            <div
              data-plasmic-name={"rateYourExperience"}
              data-plasmic-override={overrides.rateYourExperience}
              className={classNames(projectcss.all, sty.rateYourExperience)}
            >
              <label
                data-plasmic-name={"label"}
                data-plasmic-override={overrides.label}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.label
                )}
              >
                {"Rate your experience"}
              </label>
              <StarRating
                data-plasmic-name={"starRating"}
                data-plasmic-override={overrides.starRating}
                className={classNames("__wab_instance", sty.starRating)}
                onTrustScoreChange={p.generateStateOnChangeProp($state, [
                  "starRating",
                  "trustScore"
                ])}
              />
            </div>
            <p.Stack
              as={"div"}
              data-plasmic-name={"review"}
              data-plasmic-override={overrides.review}
              hasGap={true}
              className={classNames(projectcss.all, sty.review)}
            >
              <label
                data-plasmic-name={"label2"}
                data-plasmic-override={overrides.label2}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.label2
                )}
              >
                {"Tell us more about your experience"}
              </label>
              <p.PlasmicLink
                data-plasmic-name={"linkGuidelines"}
                data-plasmic-override={overrides.linkGuidelines}
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.linkGuidelines
                )}
                component={Link}
                href={"https://www.plasmic.app/"}
                platform={"nextjs"}
              >
                {"Read our Guidelines for Reviewers"}
              </p.PlasmicLink>
              <textarea
                data-plasmic-name={"reviewContent"}
                data-plasmic-override={overrides.reviewContent}
                className={classNames(
                  projectcss.all,
                  projectcss.textarea,
                  sty.reviewContent
                )}
                onChange={e => {
                  p.generateStateOnChangeProp($state, [
                    "reviewContent",
                    "value"
                  ])(e.target.value);
                }}
                placeholder={
                  "What went wrong this time? How can this company improve? Remember to be honest, helpful and constructive!"
                }
                ref={ref => {
                  $refs["reviewContent"] = ref;
                }}
                value={
                  p.generateStateValueProp($state, [
                    "reviewContent",
                    "value"
                  ]) ?? ""
                }
              />

              <p.PlasmicLink
                data-plasmic-name={"linkHowToWrite"}
                data-plasmic-override={overrides.linkHowToWrite}
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.linkHowToWrite
                )}
                component={Link}
                href={"https://www.plasmic.app/"}
                platform={"nextjs"}
              >
                {"How to write a useful review"}
              </p.PlasmicLink>
            </p.Stack>
            <div
              data-plasmic-name={"reviewTitle"}
              data-plasmic-override={overrides.reviewTitle}
              className={classNames(projectcss.all, sty.reviewTitle)}
            >
              <label
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.label___7O1Va
                )}
              >
                {"Give your review a title"}
              </label>
              {(() => {
                const child$Props = {
                  className: classNames("__wab_instance", sty.reviewTitle2),
                  maxLength: 100,
                  onChange: p.generateStateOnChangePropForCodeComponents(
                    $state,
                    "value",
                    ["reviewTitle2", "value"],
                    AntdInput_Helpers
                  ),
                  placeholder: "What's important for people to know?",
                  value: p.generateStateValueProp($state, [
                    "reviewTitle2",
                    "value"
                  ])
                };
                p.initializeCodeComponentStates(
                  $state,
                  [
                    {
                      name: "value",
                      plasmicStateName: "reviewTitle2.value"
                    }
                  ],
                  [],
                  AntdInput_Helpers ?? {},
                  child$Props
                );

                return (
                  <AntdInput
                    data-plasmic-name={"reviewTitle2"}
                    data-plasmic-override={overrides.reviewTitle2}
                    {...child$Props}
                  />
                );
              })()}
            </div>
            <div
              data-plasmic-name={"dateOfExperience"}
              data-plasmic-override={overrides.dateOfExperience}
              className={classNames(projectcss.all, sty.dateOfExperience)}
            >
              <label
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.label__f4Kbw
                )}
              >
                {"Date of experience"}
              </label>
              {(() => {
                const child$Props = {
                  className: classNames("__wab_instance", sty.date),
                  onChange: p.generateStateOnChangePropForCodeComponents(
                    $state,
                    "value",
                    ["date", "value"],
                    AntdInput_Helpers
                  ),
                  placeholder: ``,
                  type: "date",
                  value: p.generateStateValueProp($state, ["date", "value"])
                };
                p.initializeCodeComponentStates(
                  $state,
                  [
                    {
                      name: "value",
                      plasmicStateName: "date.value"
                    }
                  ],
                  [],
                  AntdInput_Helpers ?? {},
                  child$Props
                );

                return (
                  <AntdInput
                    data-plasmic-name={"date"}
                    data-plasmic-override={overrides.date}
                    {...child$Props}
                  />
                );
              })()}
            </div>
            <p.Stack
              as={"div"}
              data-plasmic-name={"attachments"}
              data-plasmic-override={overrides.attachments}
              hasGap={true}
              className={classNames(projectcss.all, sty.attachments)}
            >
              <label
                data-plasmic-name={"header2"}
                data-plasmic-override={overrides.header2}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.header2
                )}
              >
                {"Attach a receipt (optional)"}
              </label>
              <div
                data-plasmic-name={"description"}
                data-plasmic-override={overrides.description}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.description
                )}
              >
                {
                  "Strengthen your review with a receipt, invoice or order confirmation. This makes it easier for the company to write a useful reply."
                }
              </div>
              <AntdButton
                data-plasmic-name={"submitAttachment"}
                data-plasmic-override={overrides.submitAttachment}
                className={classNames("__wab_instance", sty.submitAttachment)}
                shape={"round"}
                size={"medium"}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__b3D0Q
                  )}
                >
                  {"Attach photo or screenshot"}
                </div>
              </AntdButton>
            </p.Stack>
            <p.Stack
              as={"div"}
              data-plasmic-name={"submitReview"}
              data-plasmic-override={overrides.submitReview}
              hasGap={true}
              className={classNames(projectcss.all, sty.submitReview)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ahhkg
                )}
              >
                {
                  "By submitting this review, you confirm it\u2019s based on a genuine experience and you haven\u2019t received an incentive to write it."
                }
              </div>
              <AntdButton
                data-plasmic-name={"button"}
                data-plasmic-override={overrides.button}
                className={classNames("__wab_instance", sty.button)}
                onClick={async () => {
                  const $steps = {};

                  $steps["postgresCreate"] = true
                    ? (() => {
                        const actionArgs = {
                          dataOp: {
                            sourceId: "czoZTBwvV8zZJLNVxj78Sv",
                            opId: "ae7d796f-6a94-45f5-8db5-7f2db1c72368",
                            userArgs: {
                              variables: [
                                $ctx.params.company,
                                $state.reviewContent.value,
                                $state.reviewTitle2.value,
                                $state.date.value,
                                $state.starRating.trustScore,
                                $state.starRating.trustScore
                              ]
                            },
                            cacheKey: null,
                            invalidatedKeys: ["plasmic_refresh_all"],
                            roleId: "4d9b94b7-5067-41d5-bb18-b0b97eba2313"
                          }
                        };
                        return (async ({ dataOp, continueOnError }) => {
                          try {
                            const response = await executePlasmicDataOp(
                              dataOp,
                              {
                                userAuthToken: dataSourcesCtx?.userAuthToken,
                                user: dataSourcesCtx?.user
                              }
                            );
                            await plasmicInvalidate(dataOp.invalidatedKeys);
                            return response;
                          } catch (e) {
                            if (!continueOnError) {
                              throw e;
                            }
                            return e;
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["postgresCreate"] != null &&
                    typeof $steps["postgresCreate"] === "object" &&
                    typeof $steps["postgresCreate"].then === "function"
                  ) {
                    $steps["postgresCreate"] = await $steps["postgresCreate"];
                  }
                }}
                shape={"round"}
                size={"large"}
                submitsForm={false}
                type={"primary"}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__qNrQl
                  )}
                >
                  {"Submit review"}
                </div>
              </AntdButton>
            </p.Stack>
          </p.Stack>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "mainNavigation",
    "header",
    "companyInfo",
    "companyLogo",
    "freeBox",
    "companyName",
    "companyWebsite",
    "userReview",
    "rateYourExperience",
    "label",
    "starRating",
    "review",
    "label2",
    "linkGuidelines",
    "reviewContent",
    "linkHowToWrite",
    "reviewTitle",
    "reviewTitle2",
    "dateOfExperience",
    "date",
    "attachments",
    "header2",
    "description",
    "submitAttachment",
    "submitReview",
    "button"
  ],
  mainNavigation: ["mainNavigation"],
  header: [
    "header",
    "companyInfo",
    "companyLogo",
    "freeBox",
    "companyName",
    "companyWebsite"
  ],
  companyInfo: [
    "companyInfo",
    "companyLogo",
    "freeBox",
    "companyName",
    "companyWebsite"
  ],
  companyLogo: ["companyLogo"],
  freeBox: ["freeBox", "companyName", "companyWebsite"],
  companyName: ["companyName"],
  companyWebsite: ["companyWebsite"],
  userReview: [
    "userReview",
    "rateYourExperience",
    "label",
    "starRating",
    "review",
    "label2",
    "linkGuidelines",
    "reviewContent",
    "linkHowToWrite",
    "reviewTitle",
    "reviewTitle2",
    "dateOfExperience",
    "date",
    "attachments",
    "header2",
    "description",
    "submitAttachment",
    "submitReview",
    "button"
  ],
  rateYourExperience: ["rateYourExperience", "label", "starRating"],
  label: ["label"],
  starRating: ["starRating"],
  review: [
    "review",
    "label2",
    "linkGuidelines",
    "reviewContent",
    "linkHowToWrite"
  ],
  label2: ["label2"],
  linkGuidelines: ["linkGuidelines"],
  reviewContent: ["reviewContent"],
  linkHowToWrite: ["linkHowToWrite"],
  reviewTitle: ["reviewTitle", "reviewTitle2"],
  reviewTitle2: ["reviewTitle2"],
  dateOfExperience: ["dateOfExperience", "date"],
  date: ["date"],
  attachments: ["attachments", "header2", "description", "submitAttachment"],
  header2: ["header2"],
  description: ["description"],
  submitAttachment: ["submitAttachment"],
  submitReview: ["submitReview", "button"],
  button: ["button"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  mainNavigation: typeof MainNavigation;
  header: "div";
  companyInfo: "div";
  companyLogo: typeof p.PlasmicImg;
  freeBox: "div";
  companyName: "div";
  companyWebsite: "div";
  userReview: "form";
  rateYourExperience: "div";
  label: "label";
  starRating: typeof StarRating;
  review: "div";
  label2: "label";
  linkGuidelines: "a";
  reviewContent: "textarea";
  linkHowToWrite: "a";
  reviewTitle: "div";
  reviewTitle2: typeof AntdInput;
  dateOfExperience: "div";
  date: typeof AntdInput;
  attachments: "div";
  header2: "label";
  description: "div";
  submitAttachment: typeof AntdButton;
  submitReview: "div";
  button: typeof AntdButton;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicEvaluate__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicEvaluate__VariantsArgs;
    args?: PlasmicEvaluate__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicEvaluate__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicEvaluate__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicEvaluate__ArgProps,
          internalVariantPropNames: PlasmicEvaluate__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicEvaluate__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicEvaluate";
  } else {
    func.displayName = `PlasmicEvaluate.${nodeName}`;
  }
  return func;
}

function withPlasmicPageGuard<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const PageGuard: React.FC<P> = props => (
    <p.PlasmicPageGuard
      minRole={null}
      appId={"uzL7MLDrNkZiDQaUBve1wf"}
      authorizeEndpoint={"https://studio.plasmic.app/authorize"}
      canTriggerLogin={true}
    >
      <WrappedComponent {...props} />
    </p.PlasmicPageGuard>
  );

  return PageGuard;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "uzL7MLDrNkZiDQaUBve1wf"
    });

    return (
      <p.PlasmicDataSourceContextProvider
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </p.PlasmicDataSourceContextProvider>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicEvaluate = Object.assign(
  // Top-level PlasmicEvaluate renders the root element
  withUsePlasmicAuth(withPlasmicPageGuard(makeNodeComponent("root"))),
  {
    // Helper components rendering sub-elements
    mainNavigation: makeNodeComponent("mainNavigation"),
    header: makeNodeComponent("header"),
    companyInfo: makeNodeComponent("companyInfo"),
    companyLogo: makeNodeComponent("companyLogo"),
    freeBox: makeNodeComponent("freeBox"),
    companyName: makeNodeComponent("companyName"),
    companyWebsite: makeNodeComponent("companyWebsite"),
    userReview: makeNodeComponent("userReview"),
    rateYourExperience: makeNodeComponent("rateYourExperience"),
    label: makeNodeComponent("label"),
    starRating: makeNodeComponent("starRating"),
    review: makeNodeComponent("review"),
    label2: makeNodeComponent("label2"),
    linkGuidelines: makeNodeComponent("linkGuidelines"),
    reviewContent: makeNodeComponent("reviewContent"),
    linkHowToWrite: makeNodeComponent("linkHowToWrite"),
    reviewTitle: makeNodeComponent("reviewTitle"),
    reviewTitle2: makeNodeComponent("reviewTitle2"),
    dateOfExperience: makeNodeComponent("dateOfExperience"),
    date: makeNodeComponent("date"),
    attachments: makeNodeComponent("attachments"),
    header2: makeNodeComponent("header2"),
    description: makeNodeComponent("description"),
    submitAttachment: makeNodeComponent("submitAttachment"),
    submitReview: makeNodeComponent("submitReview"),
    button: makeNodeComponent("button"),

    // Metadata about props expected for PlasmicEvaluate
    internalVariantProps: PlasmicEvaluate__VariantProps,
    internalArgProps: PlasmicEvaluate__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicEvaluate;
/* prettier-ignore-end */
