// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: uzL7MLDrNkZiDQaUBve1wf
// Component: Q2OGBST8lp

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import NavDropdownItem from "../../NavDropdownItem"; // plasmic-import: yhxgNC5CiG/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_trust_pilot_clone.module.css"; // plasmic-import: uzL7MLDrNkZiDQaUBve1wf/projectcss
import sty from "./PlasmicNavProfileDropdown.module.css"; // plasmic-import: Q2OGBST8lp/css

createPlasmicElementProxy;

export type PlasmicNavProfileDropdown__VariantMembers = {};
export type PlasmicNavProfileDropdown__VariantsArgs = {};
type VariantPropType = keyof PlasmicNavProfileDropdown__VariantsArgs;
export const PlasmicNavProfileDropdown__VariantProps =
  new Array<VariantPropType>();

export type PlasmicNavProfileDropdown__ArgsType = {};
type ArgPropType = keyof PlasmicNavProfileDropdown__ArgsType;
export const PlasmicNavProfileDropdown__ArgProps = new Array<ArgPropType>();

export type PlasmicNavProfileDropdown__OverridesType = {
  root?: Flex__<"div">;
  freeBox?: Flex__<"div">;
  profilePicture?: Flex__<typeof PlasmicImg__>;
  navDropdown?: Flex__<"div">;
};

export interface DefaultNavProfileDropdownProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicNavProfileDropdown__RenderFunc(props: {
  variants: PlasmicNavProfileDropdown__VariantsArgs;
  args: PlasmicNavProfileDropdown__ArgsType;
  overrides: PlasmicNavProfileDropdown__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const [isRootHover, triggerRootHoverProps] = useTrigger("useHover", {});
  const triggers = {
    hover_root: isRootHover
  };

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
      data-plasmic-trigger-props={[triggerRootHoverProps]}
    >
      <Stack__
        as={"div"}
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox)}
      >
        <PlasmicImg__
          data-plasmic-name={"profilePicture"}
          data-plasmic-override={overrides.profilePicture}
          alt={""}
          className={classNames(sty.profilePicture)}
          displayHeight={"32px"}
          displayMaxHeight={"none"}
          displayMaxWidth={"100%"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"32px"}
          loading={"lazy"}
        />

        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text___2OJM
          )}
        >
          {"Username"}
        </div>
      </Stack__>
      <div
        data-plasmic-name={"navDropdown"}
        data-plasmic-override={overrides.navDropdown}
        className={classNames(projectcss.all, sty.navDropdown)}
      >
        <NavDropdownItem
          className={classNames("__wab_instance", sty.navDropdownItem__p4Ial)}
          onClick={async event => {
            const $steps = {};

            $steps["goToMyReviews"] = true
              ? (() => {
                  const actionArgs = { destination: `/my-reviews` };
                  return (({ destination }) => {
                    if (
                      typeof destination === "string" &&
                      destination.startsWith("#")
                    ) {
                      document
                        .getElementById(destination.substr(1))
                        .scrollIntoView({ behavior: "smooth" });
                    } else {
                      __nextRouter?.push(destination);
                    }
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["goToMyReviews"] != null &&
              typeof $steps["goToMyReviews"] === "object" &&
              typeof $steps["goToMyReviews"].then === "function"
            ) {
              $steps["goToMyReviews"] = await $steps["goToMyReviews"];
            }
          }}
        >
          {"My reviews"}
        </NavDropdownItem>
        <NavDropdownItem
          className={classNames("__wab_instance", sty.navDropdownItem__rjDw)}
        >
          {"My settings"}
        </NavDropdownItem>
        <NavDropdownItem
          className={classNames("__wab_instance", sty.navDropdownItem__p4Sls)}
        >
          {"Help"}
        </NavDropdownItem>
        <NavDropdownItem
          className={classNames("__wab_instance", sty.navDropdownItem__i0IiE)}
          onClick={async event => {
            const $steps = {};

            $steps["logOut"] = true
              ? (() => {
                  const actionArgs = {};
                  return (async ({ continueTo }) => {
                    try {
                      localStorage.removeItem("plasmic_user");
                      localStorage.removeItem("$user.uzL7MLDrNkZiDQaUBve1wf");
                    } catch (e) {}

                    if (window.__PLASMIC_AUTH_OVERRIDE) {
                      window.__PLASMIC_AUTH_OVERRIDE();
                    } else {
                      window.location.assign(
                        continueTo || window.location.href
                      );
                    }
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["logOut"] != null &&
              typeof $steps["logOut"] === "object" &&
              typeof $steps["logOut"].then === "function"
            ) {
              $steps["logOut"] = await $steps["logOut"];
            }
          }}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__ngq10
            )}
          >
            {"Log out"}
          </div>
        </NavDropdownItem>
      </div>
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "freeBox", "profilePicture", "navDropdown"],
  freeBox: ["freeBox", "profilePicture"],
  profilePicture: ["profilePicture"],
  navDropdown: ["navDropdown"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  freeBox: "div";
  profilePicture: typeof PlasmicImg__;
  navDropdown: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNavProfileDropdown__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNavProfileDropdown__VariantsArgs;
    args?: PlasmicNavProfileDropdown__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNavProfileDropdown__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicNavProfileDropdown__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicNavProfileDropdown__ArgProps,
          internalVariantPropNames: PlasmicNavProfileDropdown__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNavProfileDropdown__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNavProfileDropdown";
  } else {
    func.displayName = `PlasmicNavProfileDropdown.${nodeName}`;
  }
  return func;
}

export const PlasmicNavProfileDropdown = Object.assign(
  // Top-level PlasmicNavProfileDropdown renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    profilePicture: makeNodeComponent("profilePicture"),
    navDropdown: makeNodeComponent("navDropdown"),

    // Metadata about props expected for PlasmicNavProfileDropdown
    internalVariantProps: PlasmicNavProfileDropdown__VariantProps,
    internalArgProps: PlasmicNavProfileDropdown__ArgProps
  }
);

export default PlasmicNavProfileDropdown;
/* prettier-ignore-end */
