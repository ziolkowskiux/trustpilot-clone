// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: uzL7MLDrNkZiDQaUBve1wf
// Component: cgPUeCn72oWlE

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import MainNavigation from "../../MainNavigation"; // plasmic-import: yAd4Bu3qCA/component
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { SliderWrapper } from "@plasmicpkgs/react-slick";
import { sliderHelpers as SliderWrapper_Helpers } from "@plasmicpkgs/react-slick";
import CategoryCard from "../../CategoryCard"; // plasmic-import: 8jl3uPMC9m/component
import Testimonial from "../../Testimonial"; // plasmic-import: ui7nbJaTgbTi/component
import Footer from "../../Footer"; // plasmic-import: F_FUewQemGz/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import { useScreenVariants as useScreenVariantsstcidH67POnn4E } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: StcidH67pONN4e/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_trust_pilot_clone.module.css"; // plasmic-import: uzL7MLDrNkZiDQaUBve1wf/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: cgPUeCn72oWlE/css

import MagnifyingGlassIcon from "./icons/PlasmicIcon__MagnifyingGlass"; // plasmic-import: k_4X76Kvfh/icon

createPlasmicElementProxy;

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: Flex__<"div">;
  mainNavigation?: Flex__<typeof MainNavigation>;
  body?: Flex__<"div">;
  heroSection?: Flex__<"section">;
  heroSearch?: Flex__<"div">;
  input?: Flex__<typeof AntdInput>;
  svg?: Flex__<"svg">;
  categories?: Flex__<"section">;
  header?: Flex__<"div">;
  sliderCarousel?: Flex__<typeof SliderWrapper>;
  categoryCard4?: Flex__<typeof CategoryCard>;
  recentReviews?: Flex__<"section">;
  shopSmarter?: Flex__<"section">;
  card?: Flex__<"div">;
  images?: Flex__<"div">;
  transparencyReport?: Flex__<"div">;
  beHeard?: Flex__<"div">;
  transparencyReport2?: Flex__<"div">;
  yourStories?: Flex__<"div">;
  stories?: Flex__<"div">;
  sliderCarousel2?: Flex__<typeof SliderWrapper>;
  footer?: Flex__<typeof Footer>;
};

export interface DefaultHomepageProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "input.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "categories2",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          { name: "Bank", icon: "" },
          { name: "Travel Insurance Company", icon: "" },
          { name: "Car Dealer", icon: "" },
          { name: "Furniture Store", icon: "" },
          { name: "Jewelry Store", icon: "" },
          { name: "Clothing Store", icon: "" },
          { name: "Electronics & Technology", icon: "" }
        ]
      },
      {
        path: "categoryCard4[].categoryName",
        type: "private",
        variableType: "text"
      },
      {
        path: "categoryCard4[].icon",
        type: "private",
        variableType: "text"
      },
      {
        path: "sliderCarousel.currentSlide",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0,

        refName: "sliderCarousel",
        onMutate: generateOnMutateForSpec("currentSlide", SliderWrapper_Helpers)
      },
      {
        path: "sliderCarousel2.currentSlide",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0,

        refName: "sliderCarousel2",
        onMutate: generateOnMutateForSpec("currentSlide", SliderWrapper_Helpers)
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    query: usePlasmicDataOp(() => {
      return {
        sourceId: "czoZTBwvV8zZJLNVxj78Sv",
        opId: "0d9c7455-1098-4942-938d-75e9afbf622d",
        userArgs: {},
        cacheKey: `plasmic.$.0d9c7455-1098-4942-938d-75e9afbf622d.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsstcidH67POnn4E()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <MainNavigation
            data-plasmic-name={"mainNavigation"}
            data-plasmic-override={overrides.mainNavigation}
            className={classNames("__wab_instance", sty.mainNavigation)}
          />

          <div
            data-plasmic-name={"body"}
            data-plasmic-override={overrides.body}
            className={classNames(projectcss.all, sty.body)}
          >
            <section
              data-plasmic-name={"heroSection"}
              data-plasmic-override={overrides.heroSection}
              className={classNames(projectcss.all, sty.heroSection)}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___88KPt)}
              >
                <h2
                  className={classNames(
                    projectcss.all,
                    projectcss.h2,
                    projectcss.__wab_text,
                    sty.h2__uZdv2
                  )}
                >
                  {
                    "Read Reviews. Write reviews.\nFind companies you can trust."
                  }
                </h2>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"heroSearch"}
                  data-plasmic-override={overrides.heroSearch}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.heroSearch)}
                >
                  {(() => {
                    const child$Props = {
                      addonAfter: null,
                      bordered: false,
                      className: classNames("__wab_instance", sty.input),
                      onChange: async (...eventArgs: any) => {
                        generateStateOnChangePropForCodeComponents(
                          $state,
                          "value",
                          ["input", "value"],
                          AntdInput_Helpers
                        ).apply(null, eventArgs);
                        (async event => {
                          const $steps = {};

                          $steps["useIntegration"] =
                            $state.input.value.length > 3
                              ? (() => {
                                  const actionArgs = {};
                                  return (async ({
                                    dataOp,
                                    continueOnError
                                  }) => {
                                    try {
                                      const response =
                                        await executePlasmicDataOp(dataOp, {
                                          userAuthToken:
                                            dataSourcesCtx?.userAuthToken,
                                          user: dataSourcesCtx?.user
                                        });
                                      await plasmicInvalidate(
                                        dataOp.invalidatedKeys
                                      );
                                      return response;
                                    } catch (e) {
                                      if (!continueOnError) {
                                        throw e;
                                      }
                                      return e;
                                    }
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                          if (
                            $steps["useIntegration"] != null &&
                            typeof $steps["useIntegration"] === "object" &&
                            typeof $steps["useIntegration"].then === "function"
                          ) {
                            $steps["useIntegration"] = await $steps[
                              "useIntegration"
                            ];
                          }
                        }).apply(null, eventArgs);
                      },
                      placeholder: "Company or category",
                      prefix: (
                        <MagnifyingGlassIcon
                          data-plasmic-name={"svg"}
                          data-plasmic-override={overrides.svg}
                          className={classNames(projectcss.all, sty.svg)}
                          role={"img"}
                        />
                      ),

                      size: "large",
                      value: generateStateValueProp($state, ["input", "value"])
                    };
                    initializeCodeComponentStates(
                      $state,
                      [
                        {
                          name: "value",
                          plasmicStateName: "input.value"
                        }
                      ],
                      [],
                      AntdInput_Helpers ?? {},
                      child$Props
                    );

                    return (
                      <AntdInput
                        data-plasmic-name={"input"}
                        data-plasmic-override={overrides.input}
                        {...child$Props}
                      />
                    );
                  })()}
                  <AntdButton
                    className={classNames("__wab_instance", sty.button___1VFxS)}
                    shape={"round"}
                    size={"large"}
                    type={"primary"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__lxHq4
                      )}
                    >
                      {"Search"}
                    </div>
                  </AntdButton>
                </Stack__>
              </Stack__>
            </section>
            <section
              data-plasmic-name={"categories"}
              data-plasmic-override={overrides.categories}
              className={classNames(projectcss.all, sty.categories)}
            >
              <div
                data-plasmic-name={"header"}
                data-plasmic-override={overrides.header}
                className={classNames(projectcss.all, sty.header)}
              >
                <h4
                  className={classNames(
                    projectcss.all,
                    projectcss.h4,
                    projectcss.__wab_text,
                    sty.h4__yqhR2
                  )}
                >
                  {"Explore categories"}
                </h4>
                <AntdButton
                  className={classNames("__wab_instance", sty.button__li1Vn)}
                  href={`/categories`}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___8M8M9
                    )}
                  >
                    {"View All"}
                  </div>
                </AntdButton>
              </div>
              {(() => {
                const child$Props = {
                  accessibility: true,
                  adaptiveHeight: hasVariant(globalVariants, "screen", "mobile")
                    ? true
                    : true,
                  arrows: hasVariant(globalVariants, "screen", "mobile")
                    ? false
                    : undefined,
                  beforeChange: generateStateOnChangePropForCodeComponents(
                    $state,
                    "currentSlide",
                    ["sliderCarousel", "currentSlide"],
                    SliderWrapper_Helpers
                  ),
                  centerMode: false,
                  className: classNames("__wab_instance", sty.sliderCarousel),
                  dots: false,
                  infinite: false,
                  initialSlide: generateStateValueProp($state, [
                    "sliderCarousel",
                    "currentSlide"
                  ]),
                  pauseOnDotsHover: true,
                  ref: ref => {
                    $refs["sliderCarousel"] = ref;
                  },
                  rows: 3,
                  sliderScopeClassName: sty["sliderCarousel__slider"],
                  slidesPerRow: hasVariant(globalVariants, "screen", "mobile")
                    ? 2
                    : 4,
                  variableWidth: false
                };
                initializeCodeComponentStates(
                  $state,
                  [
                    {
                      name: "currentSlide",
                      plasmicStateName: "sliderCarousel.currentSlide"
                    }
                  ],
                  [],
                  SliderWrapper_Helpers ?? {},
                  child$Props
                );

                return (
                  <SliderWrapper
                    data-plasmic-name={"sliderCarousel"}
                    data-plasmic-override={overrides.sliderCarousel}
                    {...child$Props}
                  >
                    {(_par =>
                      !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                      (() => {
                        try {
                          return $queries.query.data;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    ).map((__plasmic_item_0, __plasmic_idx_0) => {
                      const currentItem = __plasmic_item_0;
                      const currentIndex = __plasmic_idx_0;
                      return (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__gtQxp
                          )}
                          key={currentIndex}
                        >
                          {(() => {
                            const child$Props = {
                              categoryName: generateStateValueProp($state, [
                                "categoryCard4",
                                __plasmic_idx_0,
                                "categoryName"
                              ]),
                              className: classNames(
                                "__wab_instance",
                                sty.categoryCard4
                              ),
                              icon: generateStateValueProp($state, [
                                "categoryCard4",
                                __plasmic_idx_0,
                                "icon"
                              ]),
                              onCategoryNameChange: generateStateOnChangeProp(
                                $state,
                                [
                                  "categoryCard4",
                                  __plasmic_idx_0,
                                  "categoryName"
                                ]
                              ),
                              onIconChange: generateStateOnChangeProp($state, [
                                "categoryCard4",
                                __plasmic_idx_0,
                                "icon"
                              ])
                            };

                            initializePlasmicStates(
                              $state,
                              [
                                {
                                  name: "categoryCard4[].categoryName",
                                  initFunc: ({ $props, $state, $queries }) =>
                                    (() => {
                                      try {
                                        return $queries.query.data[currentIndex]
                                          .name;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                },
                                {
                                  name: "categoryCard4[].icon",
                                  initFunc: ({ $props, $state, $queries }) =>
                                    (() => {
                                      try {
                                        return $queries.query.data[currentIndex]
                                          .icon;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                }
                              ],
                              [__plasmic_idx_0]
                            );
                            return (
                              <CategoryCard
                                data-plasmic-name={"categoryCard4"}
                                data-plasmic-override={overrides.categoryCard4}
                                {...child$Props}
                              />
                            );
                          })()}
                        </div>
                      );
                    })}
                  </SliderWrapper>
                );
              })()}
            </section>
            <section
              data-plasmic-name={"recentReviews"}
              data-plasmic-override={overrides.recentReviews}
              className={classNames(projectcss.all, sty.recentReviews)}
            >
              <h4
                className={classNames(
                  projectcss.all,
                  projectcss.h4,
                  projectcss.__wab_text,
                  sty.h4___5AsSb
                )}
              >
                {"Recent Reviews"}
              </h4>
            </section>
            <section
              data-plasmic-name={"shopSmarter"}
              data-plasmic-override={overrides.shopSmarter}
              className={classNames(projectcss.all, sty.shopSmarter)}
            >
              <div
                data-plasmic-name={"card"}
                data-plasmic-override={overrides.card}
                className={classNames(projectcss.all, sty.card)}
              >
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__aokCs)}
                >
                  <h2
                    className={classNames(
                      projectcss.all,
                      projectcss.h2,
                      projectcss.__wab_text,
                      sty.h2__iKgyt
                    )}
                  >
                    {"Shop smarter with the Trustpilot app"}
                  </h2>
                  <p
                    className={classNames(
                      projectcss.all,
                      projectcss.p,
                      projectcss.__wab_text,
                      sty.p__zUqjx
                    )}
                  >
                    {
                      "Keep Trustpilot in your pocket. Find companies, read reviews, or write them - all while on the go."
                    }
                  </p>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"images"}
                    data-plasmic-override={overrides.images}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.images)}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__miEy0)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"30%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"100%"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/trust_pilot_clone/images/image.png",
                        fullWidth: 989,
                        fullHeight: 1992,
                        aspectRatio: undefined
                      }}
                    />

                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__rrOa)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"30%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"100%"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/trust_pilot_clone/images/image2.png",
                        fullWidth: 989,
                        fullHeight: 1992,
                        aspectRatio: undefined
                      }}
                    />

                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__zXFwK)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"30%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"100%"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/trust_pilot_clone/images/image3.png",
                        fullWidth: 989,
                        fullHeight: 1992,
                        aspectRatio: undefined
                      }}
                    />
                  </Stack__>
                </Stack__>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__ovjqy)}
                >
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox___4UR41)}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__ypw1L)}
                      displayHeight={"48px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"48px"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/trust_pilot_clone/images/image4.webp",
                        fullWidth: 192,
                        fullHeight: 192,
                        aspectRatio: undefined
                      }}
                    />

                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__arWmb)}
                      displayHeight={"48px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"48px"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/trust_pilot_clone/images/image5.webp",
                        fullWidth: 192,
                        fullHeight: 192,
                        aspectRatio: undefined
                      }}
                    />

                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__sSZb4)}
                      displayHeight={"48px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"48px"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/trust_pilot_clone/images/image6.webp",
                        fullWidth: 192,
                        fullHeight: 192,
                        aspectRatio: undefined
                      }}
                    />

                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__bpg5M)}
                      displayHeight={"48px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"48px"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/trust_pilot_clone/images/image7.webp",
                        fullWidth: 192,
                        fullHeight: 192,
                        aspectRatio: undefined
                      }}
                    />
                  </Stack__>
                  <div
                    className={classNames(projectcss.all, sty.freeBox___0Yeim)}
                  >
                    <h2
                      className={classNames(
                        projectcss.all,
                        projectcss.h2,
                        projectcss.__wab_text,
                        sty.h2__lcyJn
                      )}
                    >
                      {"Get the iOS app"}
                    </h2>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__tH9J6
                      )}
                    >
                      {
                        "Join the community! Scan the QR code with your phone camera to download."
                      }
                    </div>
                  </div>
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__lFyZ)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"96px"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/trust_pilot_clone/images/image8.png",
                      fullWidth: 96,
                      fullHeight: 96,
                      aspectRatio: undefined
                    }}
                  />
                </Stack__>
              </div>
            </section>
            <div
              data-plasmic-name={"transparencyReport"}
              data-plasmic-override={overrides.transparencyReport}
              className={classNames(projectcss.all, sty.transparencyReport)}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___4A2Qn)}
              >
                <Stack__
                  as={"div"}
                  data-plasmic-name={"beHeard"}
                  data-plasmic-override={overrides.beHeard}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.beHeard)}
                >
                  <h2
                    className={classNames(
                      projectcss.all,
                      projectcss.h2,
                      projectcss.__wab_text,
                      sty.h2__zNt73
                    )}
                  >
                    {"Be heard"}
                  </h2>
                  <p
                    className={classNames(
                      projectcss.all,
                      projectcss.p,
                      projectcss.__wab_text,
                      sty.p__oKb9
                    )}
                  >
                    {
                      "Trustpilot is a review platform that's open to everyone. Share your experience to help others make better choices and encourage companies to up their game."
                    }
                  </p>
                  <AntdButton
                    className={classNames("__wab_instance", sty.button__r7UmK)}
                    shape={"round"}
                    size={"large"}
                    type={"default"}
                  >
                    <h5
                      className={classNames(
                        projectcss.all,
                        projectcss.h5,
                        projectcss.__wab_text,
                        sty.h5__d0V4
                      )}
                    >
                      {"What we do"}
                    </h5>
                  </AntdButton>
                </Stack__>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"transparencyReport2"}
                  data-plasmic-override={overrides.transparencyReport2}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    sty.transparencyReport2
                  )}
                >
                  <h2
                    className={classNames(
                      projectcss.all,
                      projectcss.h2,
                      projectcss.__wab_text,
                      sty.h2__jJXqb
                    )}
                  >
                    {"Our 2022 Transparency Report has landed"}
                  </h2>
                  <p
                    className={classNames(
                      projectcss.all,
                      projectcss.p,
                      projectcss.__wab_text,
                      sty.p__webNi
                    )}
                  >
                    {
                      "We're looking back on a year unlike any other. Read about how we ensure our platform's integrity."
                    }
                  </p>
                  <AntdButton
                    className={classNames("__wab_instance", sty.button__x39Kn)}
                    shape={"round"}
                    size={"large"}
                  >
                    <h5
                      className={classNames(
                        projectcss.all,
                        projectcss.h5,
                        projectcss.__wab_text,
                        sty.h5__svlws
                      )}
                    >
                      {"Take a loook"}
                    </h5>
                  </AntdButton>
                </Stack__>
              </Stack__>
            </div>
            <Stack__
              as={"div"}
              data-plasmic-name={"yourStories"}
              data-plasmic-override={overrides.yourStories}
              hasGap={true}
              className={classNames(projectcss.all, sty.yourStories)}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__bNlWx)}
              >
                <h4
                  className={classNames(
                    projectcss.all,
                    projectcss.h4,
                    projectcss.__wab_text,
                    sty.h4__bd34V
                  )}
                >
                  {"Your stories"}
                </h4>
                <h2
                  className={classNames(
                    projectcss.all,
                    projectcss.h2,
                    projectcss.__wab_text,
                    sty.h2__zBLla
                  )}
                >
                  {"Each review has a personal story"}
                </h2>
              </Stack__>
              <div
                data-plasmic-name={"stories"}
                data-plasmic-override={overrides.stories}
                className={classNames(projectcss.all, sty.stories)}
              >
                {(() => {
                  const child$Props = {
                    autoplay: true,
                    beforeChange: generateStateOnChangePropForCodeComponents(
                      $state,
                      "currentSlide",
                      ["sliderCarousel2", "currentSlide"],
                      SliderWrapper_Helpers
                    ),
                    centerMode: true,
                    centerPadding: "0",
                    className: classNames(
                      "__wab_instance",
                      sty.sliderCarousel2
                    ),
                    dots: false,
                    infinite: true,
                    initialSlide: generateStateValueProp($state, [
                      "sliderCarousel2",
                      "currentSlide"
                    ]),
                    pauseOnDotsHover: false,
                    pauseOnFocus: false,
                    ref: ref => {
                      $refs["sliderCarousel2"] = ref;
                    },
                    sliderScopeClassName: sty["sliderCarousel2__slider"],
                    slidesToShow: 1
                  };
                  initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "currentSlide",
                        plasmicStateName: "sliderCarousel2.currentSlide"
                      }
                    ],
                    [],
                    SliderWrapper_Helpers ?? {},
                    child$Props
                  );

                  return (
                    <SliderWrapper
                      data-plasmic-name={"sliderCarousel2"}
                      data-plasmic-override={overrides.sliderCarousel2}
                      {...child$Props}
                    >
                      <Testimonial
                        className={classNames(
                          "__wab_instance",
                          sty.testimonial___1RZzC
                        )}
                      />

                      <Testimonial
                        className={classNames(
                          "__wab_instance",
                          sty.testimonial__cvtQm
                        )}
                      />

                      <Testimonial
                        className={classNames(
                          "__wab_instance",
                          sty.testimonial__ignRk
                        )}
                      />
                    </SliderWrapper>
                  );
                })()}
              </div>
            </Stack__>
          </div>
          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "mainNavigation",
    "body",
    "heroSection",
    "heroSearch",
    "input",
    "svg",
    "categories",
    "header",
    "sliderCarousel",
    "categoryCard4",
    "recentReviews",
    "shopSmarter",
    "card",
    "images",
    "transparencyReport",
    "beHeard",
    "transparencyReport2",
    "yourStories",
    "stories",
    "sliderCarousel2",
    "footer"
  ],
  mainNavigation: ["mainNavigation"],
  body: [
    "body",
    "heroSection",
    "heroSearch",
    "input",
    "svg",
    "categories",
    "header",
    "sliderCarousel",
    "categoryCard4",
    "recentReviews",
    "shopSmarter",
    "card",
    "images",
    "transparencyReport",
    "beHeard",
    "transparencyReport2",
    "yourStories",
    "stories",
    "sliderCarousel2"
  ],
  heroSection: ["heroSection", "heroSearch", "input", "svg"],
  heroSearch: ["heroSearch", "input", "svg"],
  input: ["input", "svg"],
  svg: ["svg"],
  categories: ["categories", "header", "sliderCarousel", "categoryCard4"],
  header: ["header"],
  sliderCarousel: ["sliderCarousel", "categoryCard4"],
  categoryCard4: ["categoryCard4"],
  recentReviews: ["recentReviews"],
  shopSmarter: ["shopSmarter", "card", "images"],
  card: ["card", "images"],
  images: ["images"],
  transparencyReport: ["transparencyReport", "beHeard", "transparencyReport2"],
  beHeard: ["beHeard"],
  transparencyReport2: ["transparencyReport2"],
  yourStories: ["yourStories", "stories", "sliderCarousel2"],
  stories: ["stories", "sliderCarousel2"],
  sliderCarousel2: ["sliderCarousel2"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  mainNavigation: typeof MainNavigation;
  body: "div";
  heroSection: "section";
  heroSearch: "div";
  input: typeof AntdInput;
  svg: "svg";
  categories: "section";
  header: "div";
  sliderCarousel: typeof SliderWrapper;
  categoryCard4: typeof CategoryCard;
  recentReviews: "section";
  shopSmarter: "section";
  card: "div";
  images: "div";
  transparencyReport: "div";
  beHeard: "div";
  transparencyReport2: "div";
  yourStories: "div";
  stories: "div";
  sliderCarousel2: typeof SliderWrapper;
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

function withPlasmicPageGuard<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const PageGuard: React.FC<P> = props => (
    <PlasmicPageGuard__
      minRole={null}
      appId={"uzL7MLDrNkZiDQaUBve1wf"}
      authorizeEndpoint={"https://studio.plasmic.app/authorize"}
      canTriggerLogin={true}
    >
      <WrappedComponent {...props} />
    </PlasmicPageGuard__>
  );

  return PageGuard;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "uzL7MLDrNkZiDQaUBve1wf"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  withUsePlasmicAuth(withPlasmicPageGuard(makeNodeComponent("root"))),
  {
    // Helper components rendering sub-elements
    mainNavigation: makeNodeComponent("mainNavigation"),
    body: makeNodeComponent("body"),
    heroSection: makeNodeComponent("heroSection"),
    heroSearch: makeNodeComponent("heroSearch"),
    input: makeNodeComponent("input"),
    svg: makeNodeComponent("svg"),
    categories: makeNodeComponent("categories"),
    header: makeNodeComponent("header"),
    sliderCarousel: makeNodeComponent("sliderCarousel"),
    categoryCard4: makeNodeComponent("categoryCard4"),
    recentReviews: makeNodeComponent("recentReviews"),
    shopSmarter: makeNodeComponent("shopSmarter"),
    card: makeNodeComponent("card"),
    images: makeNodeComponent("images"),
    transparencyReport: makeNodeComponent("transparencyReport"),
    beHeard: makeNodeComponent("beHeard"),
    transparencyReport2: makeNodeComponent("transparencyReport2"),
    yourStories: makeNodeComponent("yourStories"),
    stories: makeNodeComponent("stories"),
    sliderCarousel2: makeNodeComponent("sliderCarousel2"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
