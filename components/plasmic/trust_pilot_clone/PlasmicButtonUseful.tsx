// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: uzL7MLDrNkZiDQaUBve1wf
// Component: ihmuDpsJi3Cb

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_trust_pilot_clone.module.css"; // plasmic-import: uzL7MLDrNkZiDQaUBve1wf/projectcss
import sty from "./PlasmicButtonUseful.module.css"; // plasmic-import: ihmuDpsJi3Cb/css

import LikeIcon from "./icons/PlasmicIcon__Like"; // plasmic-import: cKBqvi50adZq/icon
import LikeSolidIcon from "./icons/PlasmicIcon__LikeSolid"; // plasmic-import: jcwXxcZGuU6N/icon

createPlasmicElementProxy;

export type PlasmicButtonUseful__VariantMembers = {
  pressed: "pressed";
};
export type PlasmicButtonUseful__VariantsArgs = {
  pressed?: SingleBooleanChoiceArg<"pressed">;
};
type VariantPropType = keyof PlasmicButtonUseful__VariantsArgs;
export const PlasmicButtonUseful__VariantProps = new Array<VariantPropType>(
  "pressed"
);

export type PlasmicButtonUseful__ArgsType = {};
type ArgPropType = keyof PlasmicButtonUseful__ArgsType;
export const PlasmicButtonUseful__ArgProps = new Array<ArgPropType>();

export type PlasmicButtonUseful__OverridesType = {
  tagLike?: Flex__<"button">;
  svg?: Flex__<"svg">;
  labelUseful?: Flex__<"div">;
};

export interface DefaultButtonUsefulProps {
  pressed?: SingleBooleanChoiceArg<"pressed">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicButtonUseful__RenderFunc(props: {
  variants: PlasmicButtonUseful__VariantsArgs;
  args: PlasmicButtonUseful__ArgsType;
  overrides: PlasmicButtonUseful__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "pressed",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.pressed
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <Stack__
      as={"button"}
      data-plasmic-name={"tagLike"}
      data-plasmic-override={overrides.tagLike}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.button,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.tagLike
      )}
      onClick={async event => {
        const $steps = {};

        $steps["updatePressed"] = true
          ? (() => {
              const actionArgs = {
                vgroup: "pressed",
                operation: 2,
                value: "pressed"
              };
              return (({ vgroup, value }) => {
                if (typeof value === "string") {
                  value = [value];
                }

                const oldValue = $stateGet($state, vgroup);
                $stateSet($state, vgroup, !oldValue);
                return !oldValue;
              })?.apply(null, [actionArgs]);
            })()
          : undefined;
        if (
          $steps["updatePressed"] != null &&
          typeof $steps["updatePressed"] === "object" &&
          typeof $steps["updatePressed"].then === "function"
        ) {
          $steps["updatePressed"] = await $steps["updatePressed"];
        }
      }}
      ref={ref => {
        $refs["tagLike"] = ref;
      }}
    >
      <PlasmicIcon__
        data-plasmic-name={"svg"}
        data-plasmic-override={overrides.svg}
        PlasmicIconType={
          hasVariant($state, "pressed", "pressed") ? LikeSolidIcon : LikeIcon
        }
        className={classNames(projectcss.all, sty.svg, {
          [sty.svgpressed]: hasVariant($state, "pressed", "pressed")
        })}
        role={"img"}
      />

      <div
        data-plasmic-name={"labelUseful"}
        data-plasmic-override={overrides.labelUseful}
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.labelUseful
        )}
      >
        {"Useful"}
      </div>
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  tagLike: ["tagLike", "svg", "labelUseful"],
  svg: ["svg"],
  labelUseful: ["labelUseful"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  tagLike: "button";
  svg: "svg";
  labelUseful: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicButtonUseful__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicButtonUseful__VariantsArgs;
    args?: PlasmicButtonUseful__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicButtonUseful__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicButtonUseful__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicButtonUseful__ArgProps,
          internalVariantPropNames: PlasmicButtonUseful__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicButtonUseful__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "tagLike") {
    func.displayName = "PlasmicButtonUseful";
  } else {
    func.displayName = `PlasmicButtonUseful.${nodeName}`;
  }
  return func;
}

export const PlasmicButtonUseful = Object.assign(
  // Top-level PlasmicButtonUseful renders the root element
  makeNodeComponent("tagLike"),
  {
    // Helper components rendering sub-elements
    svg: makeNodeComponent("svg"),
    labelUseful: makeNodeComponent("labelUseful"),

    // Metadata about props expected for PlasmicButtonUseful
    internalVariantProps: PlasmicButtonUseful__VariantProps,
    internalArgProps: PlasmicButtonUseful__ArgProps
  }
);

export default PlasmicButtonUseful;
/* prettier-ignore-end */
