// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: uzL7MLDrNkZiDQaUBve1wf
// Component: hWfONOgVJn4L

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_trust_pilot_clone.module.css"; // plasmic-import: uzL7MLDrNkZiDQaUBve1wf/projectcss
import sty from "./PlasmicWebsiteAddressCard.module.css"; // plasmic-import: hWfONOgVJn4L/css

import ArrowSquqreOutIcon from "./icons/PlasmicIcon__ArrowSquqreOut"; // plasmic-import: _dFCz2OtvylS/icon
import ArrowRightIcon from "./icons/PlasmicIcon__ArrowRight"; // plasmic-import: 8fXDFb6NDoN/icon

createPlasmicElementProxy;

export type PlasmicWebsiteAddressCard__VariantMembers = {};
export type PlasmicWebsiteAddressCard__VariantsArgs = {};
type VariantPropType = keyof PlasmicWebsiteAddressCard__VariantsArgs;
export const PlasmicWebsiteAddressCard__VariantProps =
  new Array<VariantPropType>();

export type PlasmicWebsiteAddressCard__ArgsType = {
  companyWebsite?: string;
};
type ArgPropType = keyof PlasmicWebsiteAddressCard__ArgsType;
export const PlasmicWebsiteAddressCard__ArgProps = new Array<ArgPropType>(
  "companyWebsite"
);

export type PlasmicWebsiteAddressCard__OverridesType = {
  linkToWebsite?: Flex__<"a"> & Partial<LinkProps>;
  websiteAddress?: Flex__<"div">;
  text?: Flex__<"div">;
};

export interface DefaultWebsiteAddressCardProps {
  companyWebsite?: string;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicWebsiteAddressCard__RenderFunc(props: {
  variants: PlasmicWebsiteAddressCard__VariantsArgs;
  args: PlasmicWebsiteAddressCard__ArgsType;
  overrides: PlasmicWebsiteAddressCard__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          companyWebsite: "www.google.pl"
        },
        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  return (
    <Stack__
      as={PlasmicLink__}
      data-plasmic-name={"linkToWebsite"}
      data-plasmic-override={overrides.linkToWebsite}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.a,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.linkToWebsite
      )}
      component={Link}
      href={(() => {
        try {
          return $props.companyWebsite;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return `/`;
          }
          throw e;
        }
      })()}
      platform={"nextjs"}
      target={"_blank"}
    >
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox___0OhNf)}
      >
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__sPtS6)}
        >
          <ArrowSquqreOutIcon
            className={classNames(projectcss.all, sty.svg__w2Yds)}
            role={"img"}
          />

          <div
            data-plasmic-name={"websiteAddress"}
            data-plasmic-override={overrides.websiteAddress}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.websiteAddress
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $props.companyWebsite;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "Website Address";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
        </Stack__>
        <div
          data-plasmic-name={"text"}
          data-plasmic-override={overrides.text}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text
          )}
        >
          {"Visit the website"}
        </div>
      </Stack__>
      <ArrowRightIcon
        className={classNames(projectcss.all, sty.svg__wcXqT)}
        role={"img"}
      />
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  linkToWebsite: ["linkToWebsite", "websiteAddress", "text"],
  websiteAddress: ["websiteAddress"],
  text: ["text"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  linkToWebsite: "a";
  websiteAddress: "div";
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicWebsiteAddressCard__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicWebsiteAddressCard__VariantsArgs;
    args?: PlasmicWebsiteAddressCard__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicWebsiteAddressCard__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicWebsiteAddressCard__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicWebsiteAddressCard__ArgProps,
          internalVariantPropNames: PlasmicWebsiteAddressCard__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicWebsiteAddressCard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "linkToWebsite") {
    func.displayName = "PlasmicWebsiteAddressCard";
  } else {
    func.displayName = `PlasmicWebsiteAddressCard.${nodeName}`;
  }
  return func;
}

export const PlasmicWebsiteAddressCard = Object.assign(
  // Top-level PlasmicWebsiteAddressCard renders the root element
  makeNodeComponent("linkToWebsite"),
  {
    // Helper components rendering sub-elements
    websiteAddress: makeNodeComponent("websiteAddress"),
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicWebsiteAddressCard
    internalVariantProps: PlasmicWebsiteAddressCard__VariantProps,
    internalArgProps: PlasmicWebsiteAddressCard__ArgProps
  }
);

export default PlasmicWebsiteAddressCard;
/* prettier-ignore-end */
