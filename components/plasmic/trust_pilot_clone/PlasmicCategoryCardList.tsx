// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: uzL7MLDrNkZiDQaUBve1wf
// Component: TJhZvJpEpm

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_trust_pilot_clone.module.css"; // plasmic-import: uzL7MLDrNkZiDQaUBve1wf/projectcss
import sty from "./PlasmicCategoryCardList.module.css"; // plasmic-import: TJhZvJpEpm/css

createPlasmicElementProxy;

export type PlasmicCategoryCardList__VariantMembers = {};
export type PlasmicCategoryCardList__VariantsArgs = {};
type VariantPropType = keyof PlasmicCategoryCardList__VariantsArgs;
export const PlasmicCategoryCardList__VariantProps =
  new Array<VariantPropType>();

export type PlasmicCategoryCardList__ArgsType = {
  categoryIcon?: React.ComponentProps<typeof p.PlasmicImg>["src"];
  categoryName?: string;
  subcategories?: any;
  categoryLink?: string;
};
type ArgPropType = keyof PlasmicCategoryCardList__ArgsType;
export const PlasmicCategoryCardList__ArgProps = new Array<ArgPropType>(
  "categoryIcon",
  "categoryName",
  "subcategories",
  "categoryLink"
);

export type PlasmicCategoryCardList__OverridesType = {
  categoryCard?: p.Flex<"div">;
  categoryHeader?: p.Flex<"a"> & Partial<LinkProps>;
  categoryIcon?: p.Flex<typeof p.PlasmicImg>;
  categoryName?: p.Flex<"h6">;
  subcategoriesList?: p.Flex<"div">;
  link?: p.Flex<"div">;
};

export interface DefaultCategoryCardListProps {
  categoryIcon?: React.ComponentProps<typeof p.PlasmicImg>["src"];
  categoryName?: string;
  subcategories?: any;
  categoryLink?: string;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicCategoryCardList__RenderFunc(props: {
  variants: PlasmicCategoryCardList__VariantsArgs;
  args: PlasmicCategoryCardList__ArgsType;
  overrides: PlasmicCategoryCardList__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          categoryName: "Category Name",
          subcategories: [
            { name: "Animal health" },
            { name: "Animal Parks & ZOO" },
            { name: "Cats & Dogs" }
          ]
        },
        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  return (
    <div
      data-plasmic-name={"categoryCard"}
      data-plasmic-override={overrides.categoryCard}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.categoryCard
      )}
    >
      <p.Stack
        as={p.PlasmicLink}
        data-plasmic-name={"categoryHeader"}
        data-plasmic-override={overrides.categoryHeader}
        hasGap={true}
        className={classNames(projectcss.all, projectcss.a, sty.categoryHeader)}
        component={Link}
        href={args.categoryLink}
        platform={"nextjs"}
      >
        <p.PlasmicImg
          data-plasmic-name={"categoryIcon"}
          data-plasmic-override={overrides.categoryIcon}
          alt={""}
          className={classNames(sty.categoryIcon)}
          displayHeight={"48px"}
          displayMaxHeight={"none"}
          displayMaxWidth={"100%"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"48px"}
          loading={"lazy"}
          src={args.categoryIcon}
        />

        <h6
          data-plasmic-name={"categoryName"}
          data-plasmic-override={overrides.categoryName}
          className={classNames(
            projectcss.all,
            projectcss.h6,
            projectcss.__wab_text,
            sty.categoryName
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return $props.categoryName;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "Category Name";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </h6>
      </p.Stack>
      <div
        data-plasmic-name={"subcategoriesList"}
        data-plasmic-override={overrides.subcategoriesList}
        className={classNames(projectcss.all, sty.subcategoriesList)}
      >
        {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
          (() => {
            try {
              return $props.subcategories;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
        ).map((__plasmic_item_0, __plasmic_idx_0) => {
          const currentItem = __plasmic_item_0;
          const currentIndex = __plasmic_idx_0;
          return (
            <p.Stack
              as={"div"}
              data-plasmic-name={"link"}
              data-plasmic-override={overrides.link}
              hasGap={true}
              className={classNames(projectcss.all, sty.link)}
              key={currentIndex}
            >
              <p.PlasmicLink
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.link__c0Zte
                )}
                component={Link}
                href={"https://www.plasmic.app/"}
                platform={"nextjs"}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return currentItem.name;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "Some link text";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </p.PlasmicLink>
            </p.Stack>
          );
        })}
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  categoryCard: [
    "categoryCard",
    "categoryHeader",
    "categoryIcon",
    "categoryName",
    "subcategoriesList",
    "link"
  ],
  categoryHeader: ["categoryHeader", "categoryIcon", "categoryName"],
  categoryIcon: ["categoryIcon"],
  categoryName: ["categoryName"],
  subcategoriesList: ["subcategoriesList", "link"],
  link: ["link"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  categoryCard: "div";
  categoryHeader: "a";
  categoryIcon: typeof p.PlasmicImg;
  categoryName: "h6";
  subcategoriesList: "div";
  link: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCategoryCardList__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCategoryCardList__VariantsArgs;
    args?: PlasmicCategoryCardList__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCategoryCardList__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicCategoryCardList__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCategoryCardList__ArgProps,
          internalVariantPropNames: PlasmicCategoryCardList__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCategoryCardList__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "categoryCard") {
    func.displayName = "PlasmicCategoryCardList";
  } else {
    func.displayName = `PlasmicCategoryCardList.${nodeName}`;
  }
  return func;
}

export const PlasmicCategoryCardList = Object.assign(
  // Top-level PlasmicCategoryCardList renders the root element
  makeNodeComponent("categoryCard"),
  {
    // Helper components rendering sub-elements
    categoryHeader: makeNodeComponent("categoryHeader"),
    categoryIcon: makeNodeComponent("categoryIcon"),
    categoryName: makeNodeComponent("categoryName"),
    subcategoriesList: makeNodeComponent("subcategoriesList"),
    link: makeNodeComponent("link"),

    // Metadata about props expected for PlasmicCategoryCardList
    internalVariantProps: PlasmicCategoryCardList__VariantProps,
    internalArgProps: PlasmicCategoryCardList__ArgProps
  }
);

export default PlasmicCategoryCardList;
/* prettier-ignore-end */
