// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: uzL7MLDrNkZiDQaUBve1wf
// Component: 6IUU2ypGcz

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import MainNavigation from "../../MainNavigation"; // plasmic-import: yAd4Bu3qCA/component
import Tooltip from "../../Tooltip"; // plasmic-import: qJCD7o382h/component
import { AntdRadioGroup } from "@plasmicpkgs/antd5/skinny/registerRadio";
import { AntdRadio } from "@plasmicpkgs/antd5/skinny/registerRadio";
import { AntdSelect } from "@plasmicpkgs/antd5/skinny/registerSelect";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdCheckbox } from "@plasmicpkgs/antd5/skinny/registerCheckbox";
import Label from "../../Label"; // plasmic-import: W1OlkHb9N4/component
import CompanyCard from "../../CompanyCard"; // plasmic-import: pRzZD4AnBwq/component
import { AntdPagination } from "@plasmicpkgs/antd5/skinny/registerPagination";
import { paginationHelpers as AntdPagination_Helpers } from "@plasmicpkgs/antd5/skinny/registerPagination";
import Footer from "../../Footer"; // plasmic-import: F_FUewQemGz/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_trust_pilot_clone.module.css"; // plasmic-import: uzL7MLDrNkZiDQaUBve1wf/projectcss
import sty from "./PlasmicCompaniesList.module.css"; // plasmic-import: 6IUU2ypGcz/css

createPlasmicElementProxy;

export type PlasmicCompaniesList__VariantMembers = {};
export type PlasmicCompaniesList__VariantsArgs = {};
type VariantPropType = keyof PlasmicCompaniesList__VariantsArgs;
export const PlasmicCompaniesList__VariantProps = new Array<VariantPropType>();

export type PlasmicCompaniesList__ArgsType = {};
type ArgPropType = keyof PlasmicCompaniesList__ArgsType;
export const PlasmicCompaniesList__ArgProps = new Array<ArgPropType>();

export type PlasmicCompaniesList__OverridesType = {
  root?: Flex__<"div">;
  mainNavigation?: Flex__<typeof MainNavigation>;
  body?: Flex__<"div">;
  header?: Flex__<"div">;
  h1?: Flex__<"h1">;
  p?: Flex__<"p">;
  tooltip?: Flex__<typeof Tooltip>;
  list?: Flex__<"div">;
  search?: Flex__<"div">;
  filters?: Flex__<"div">;
  rating?: Flex__<"div">;
  radioGroupRating?: Flex__<typeof AntdRadioGroup>;
  selectCountries?: Flex__<typeof AntdSelect>;
  inputCityOrZipCode?: Flex__<typeof AntdInput>;
  checkboxVerified?: Flex__<typeof AntdCheckbox>;
  checkboxClaimed?: Flex__<typeof AntdCheckbox>;
  categoriesBadge?: Flex__<typeof Label>;
  data?: Flex__<"div">;
  infoAndSorting?: Flex__<"div">;
  sortFilter?: Flex__<"div">;
  sortBy?: Flex__<typeof AntdSelect>;
  companyCard?: Flex__<typeof CompanyCard>;
  pagination?: Flex__<typeof AntdPagination>;
  footer?: Flex__<typeof Footer>;
};

export interface DefaultCompaniesListProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicCompaniesList__RenderFunc(props: {
  variants: PlasmicCompaniesList__VariantsArgs;
  args: PlasmicCompaniesList__ArgsType;
  overrides: PlasmicCompaniesList__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "selectCountries.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "United States"
      },
      {
        path: "inputCityOrZipCode.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "checkboxVerified.checked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "checkboxClaimed.checked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "sortBy.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "name"
      },
      {
        path: "radioGroupRating.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "0"
      },
      {
        path: "categoriesBadge[].isSelected",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "categoriesBadge[].labelValue",
        type: "private",
        variableType: "text"
      },
      {
        path: "pagination.currentPage",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 1,

        onMutate: generateOnMutateForSpec("currentPage", AntdPagination_Helpers)
      },
      {
        path: "pagination.pageSize",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 10,

        onMutate: generateOnMutateForSpec("pageSize", AntdPagination_Helpers)
      },
      {
        path: "pagination.startIndex",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("startIndex", AntdPagination_Helpers)
      },
      {
        path: "pagination.endIndex",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("endIndex", AntdPagination_Helpers)
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    fetchCompanies: usePlasmicDataOp(() => {
      return {
        sourceId: "czoZTBwvV8zZJLNVxj78Sv",
        opId: "2f9eee20-cbb8-41cb-b824-d588d12b716c",
        userArgs: {
          query: [
            $ctx.params.category_name,
            $state.checkboxVerified.checked,
            $state.checkboxClaimed.checked,
            $state.selectCountries.value,
            $state.categoriesBadge
              .filter(item => item.isSelected == true)
              .map(item => item.labelValue),
            $state.categoriesBadge.filter(item => item.isSelected === true)
              .length === 0,
            $state.radioGroupRating.value,
            $state.sortBy.value,
            $state.pagination.pageSize,
            ($state.pagination.currentPage - 1) * $state.pagination.pageSize
          ]
        },
        cacheKey: `plasmic.$.2f9eee20-cbb8-41cb-b824-d588d12b716c.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    fetchCountries: usePlasmicDataOp(() => {
      return {
        sourceId: "czoZTBwvV8zZJLNVxj78Sv",
        opId: "5e0fd05f-ca5f-4b90-bf6d-65587322d734",
        userArgs: {},
        cacheKey: `plasmic.$.5e0fd05f-ca5f-4b90-bf6d-65587322d734.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    fetchSubcategories: usePlasmicDataOp(() => {
      return {
        sourceId: "czoZTBwvV8zZJLNVxj78Sv",
        opId: "b05fc006-2810-4091-b4b3-fe1322fb8a7f",
        userArgs: {
          filters: [$ctx.params.category_name]
        },
        cacheKey: `plasmic.$.b05fc006-2810-4091-b4b3-fe1322fb8a7f.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    fetchLatestReviews: usePlasmicDataOp(() => {
      return {
        sourceId: "czoZTBwvV8zZJLNVxj78Sv",
        opId: "f965d7d5-0915-4f2f-81ac-2fbbffe57dd9",
        userArgs: {},
        cacheKey: `plasmic.$.f965d7d5-0915-4f2f-81ac-2fbbffe57dd9.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <MainNavigation
            data-plasmic-name={"mainNavigation"}
            data-plasmic-override={overrides.mainNavigation}
            className={classNames("__wab_instance", sty.mainNavigation)}
          />

          <div
            data-plasmic-name={"body"}
            data-plasmic-override={overrides.body}
            className={classNames(projectcss.all, sty.body)}
          >
            <Stack__
              as={"div"}
              data-plasmic-name={"header"}
              data-plasmic-override={overrides.header}
              hasGap={true}
              className={classNames(projectcss.all, sty.header)}
            >
              <h1
                data-plasmic-name={"h1"}
                data-plasmic-override={overrides.h1}
                className={classNames(
                  projectcss.all,
                  projectcss.h1,
                  projectcss.__wab_text,
                  sty.h1
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return "Best in " + $ctx.params.category_name;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "Best in Animals & Pets";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </h1>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___3GpBi)}
              >
                <p
                  data-plasmic-name={"p"}
                  data-plasmic-override={overrides.p}
                  className={classNames(
                    projectcss.all,
                    projectcss.p,
                    projectcss.__wab_text,
                    sty.p
                  )}
                >
                  {"Compare the best companies in this category"}
                </p>
                <Tooltip
                  data-plasmic-name={"tooltip"}
                  data-plasmic-override={overrides.tooltip}
                  className={classNames("__wab_instance", sty.tooltip)}
                />
              </Stack__>
            </Stack__>
            <div
              data-plasmic-name={"list"}
              data-plasmic-override={overrides.list}
              className={classNames(projectcss.all, sty.list)}
            >
              <div
                data-plasmic-name={"search"}
                data-plasmic-override={overrides.search}
                className={classNames(projectcss.all, sty.search)}
              >
                <Stack__
                  as={"div"}
                  data-plasmic-name={"filters"}
                  data-plasmic-override={overrides.filters}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.filters)}
                >
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"rating"}
                    data-plasmic-override={overrides.rating}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.rating)}
                  >
                    <h6
                      className={classNames(
                        projectcss.all,
                        projectcss.h6,
                        projectcss.__wab_text,
                        sty.h6__rHtSi
                      )}
                    >
                      {"Rating"}
                    </h6>
                    <AntdRadioGroup
                      data-plasmic-name={"radioGroupRating"}
                      data-plasmic-override={overrides.radioGroupRating}
                      className={classNames(
                        "__wab_instance",
                        sty.radioGroupRating
                      )}
                      defaultValue={"0"}
                      onChange={generateStateOnChangeProp($state, [
                        "radioGroupRating",
                        "value"
                      ])}
                      optionType={"button"}
                      options={(() => {
                        const __composite = [
                          { value: null, label: null },
                          { value: null, label: null },
                          { label: null, value: null },
                          { label: null, value: null }
                        ];
                        __composite["0"]["value"] = "0";
                        __composite["0"]["label"] = "Any";
                        __composite["1"]["value"] = "3";
                        __composite["1"]["label"] = "3.0+";
                        __composite["2"]["label"] = "4.0+";
                        __composite["2"]["value"] = "4";
                        __composite["3"]["label"] = "4.5+";
                        __composite["3"]["value"] = "4.5";
                        return __composite;
                      })()}
                      value={generateStateValueProp($state, [
                        "radioGroupRating",
                        "value"
                      ])}
                    >
                      <AntdRadio
                        className={classNames(
                          "__wab_instance",
                          sty.radio__aTtEe
                        )}
                        value={"op1"}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__vQh1A
                          )}
                        >
                          {"Option 1"}
                        </div>
                      </AntdRadio>
                      <AntdRadio
                        className={classNames(
                          "__wab_instance",
                          sty.radio__txPtk
                        )}
                        value={"op2"}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__ldIcd
                          )}
                        >
                          {"Option 2"}
                        </div>
                      </AntdRadio>
                    </AntdRadioGroup>
                  </Stack__>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__uGspr)}
                  >
                    <h6
                      className={classNames(
                        projectcss.all,
                        projectcss.h6,
                        projectcss.__wab_text,
                        sty.h6__swMxU
                      )}
                    >
                      {"Location"}
                    </h6>
                    <AntdSelect
                      data-plasmic-name={"selectCountries"}
                      data-plasmic-override={overrides.selectCountries}
                      className={classNames(
                        "__wab_instance",
                        sty.selectCountries
                      )}
                      defaultStylesClassName={classNames(
                        projectcss.root_reset,
                        projectcss.plasmic_default_styles,
                        projectcss.plasmic_mixins,
                        projectcss.plasmic_tokens,
                        plasmic_antd_5_hostless_css.plasmic_tokens,
                        plasmic_plasmic_rich_components_css.plasmic_tokens
                      )}
                      defaultValue={"United States"}
                      onChange={generateStateOnChangeProp($state, [
                        "selectCountries",
                        "value"
                      ])}
                      options={(() => {
                        try {
                          return (function countries() {
                            let countries = $queries.fetchCountries.data.map(
                              x => {
                                return {
                                  type: "Option",
                                  value: x.name,
                                  label: x.name
                                };
                              }
                            );
                            return countries;
                          })();
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return (() => {
                              const __composite = [
                                { value: null, label: null, type: null }
                              ];
                              __composite["0"]["value"] = "true";
                              __composite["0"]["label"] = "All countries";
                              __composite["0"]["type"] = "option";
                              return __composite;
                            })();
                          }
                          throw e;
                        }
                      })()}
                      placeholder={"Select..."}
                      popupScopeClassName={sty["selectCountries__popup"]}
                      value={generateStateValueProp($state, [
                        "selectCountries",
                        "value"
                      ])}
                    />

                    {(() => {
                      const child$Props = {
                        className: classNames(
                          "__wab_instance",
                          sty.inputCityOrZipCode
                        ),
                        onChange: generateStateOnChangePropForCodeComponents(
                          $state,
                          "value",
                          ["inputCityOrZipCode", "value"],
                          AntdInput_Helpers
                        ),
                        placeholder: "City or ZIP code",
                        value: generateStateValueProp($state, [
                          "inputCityOrZipCode",
                          "value"
                        ])
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "inputCityOrZipCode.value"
                          }
                        ],
                        [],
                        AntdInput_Helpers ?? {},
                        child$Props
                      );

                      return (
                        <AntdInput
                          data-plasmic-name={"inputCityOrZipCode"}
                          data-plasmic-override={overrides.inputCityOrZipCode}
                          {...child$Props}
                        />
                      );
                    })()}
                  </Stack__>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__tWw4A)}
                  >
                    <h6
                      className={classNames(
                        projectcss.all,
                        projectcss.h6,
                        projectcss.__wab_text,
                        sty.h6__h1Q1F
                      )}
                    >
                      {"Company status"}
                    </h6>
                    <AntdCheckbox
                      data-plasmic-name={"checkboxVerified"}
                      data-plasmic-override={overrides.checkboxVerified}
                      autoFocus={false}
                      checked={generateStateValueProp($state, [
                        "checkboxVerified",
                        "checked"
                      ])}
                      className={classNames(
                        "__wab_instance",
                        sty.checkboxVerified
                      )}
                      indeterminate={false}
                      onChange={generateStateOnChangeProp($state, [
                        "checkboxVerified",
                        "checked"
                      ])}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__uKtrU
                        )}
                      >
                        {"Verified"}
                      </div>
                    </AntdCheckbox>
                    <AntdCheckbox
                      data-plasmic-name={"checkboxClaimed"}
                      data-plasmic-override={overrides.checkboxClaimed}
                      autoFocus={false}
                      checked={generateStateValueProp($state, [
                        "checkboxClaimed",
                        "checked"
                      ])}
                      className={classNames(
                        "__wab_instance",
                        sty.checkboxClaimed
                      )}
                      indeterminate={false}
                      onChange={generateStateOnChangeProp($state, [
                        "checkboxClaimed",
                        "checked"
                      ])}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__pU57Q
                        )}
                      >
                        {"Claimed"}
                      </div>
                    </AntdCheckbox>
                  </Stack__>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__w65ID)}
                  >
                    <h6
                      className={classNames(
                        projectcss.all,
                        projectcss.h6,
                        projectcss.__wab_text,
                        sty.h6___2In3B
                      )}
                    >
                      {"Subcategories"}
                    </h6>
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__qR8ZI)}
                    >
                      {(_par =>
                        !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                        (() => {
                          try {
                            return $queries.fetchSubcategories.data;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      ).map((__plasmic_item_0, __plasmic_idx_0) => {
                        const currentItem = __plasmic_item_0;
                        const currentIndex = __plasmic_idx_0;
                        return (() => {
                          const child$Props = {
                            className: classNames(
                              "__wab_instance",
                              sty.categoriesBadge
                            ),
                            isSelected: generateStateValueProp($state, [
                              "categoriesBadge",
                              __plasmic_idx_0,
                              "isSelected"
                            ]),
                            key: currentIndex,
                            label: (() => {
                              try {
                                return currentItem.name;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })(),
                            onIsSelectedChange: generateStateOnChangeProp(
                              $state,
                              ["categoriesBadge", __plasmic_idx_0, "isSelected"]
                            ),
                            onLabelValueChange: generateStateOnChangeProp(
                              $state,
                              ["categoriesBadge", __plasmic_idx_0, "labelValue"]
                            )
                          };

                          initializePlasmicStates(
                            $state,
                            [
                              {
                                name: "categoriesBadge[].isSelected",
                                initFunc: ({ $props, $state, $queries }) =>
                                  false
                              }
                            ],
                            [__plasmic_idx_0]
                          );
                          return (
                            <Label
                              data-plasmic-name={"categoriesBadge"}
                              data-plasmic-override={overrides.categoriesBadge}
                              {...child$Props}
                            />
                          );
                        })();
                      })}
                    </Stack__>
                  </Stack__>
                </Stack__>
              </div>
              <Stack__
                as={"div"}
                data-plasmic-name={"data"}
                data-plasmic-override={overrides.data}
                hasGap={true}
                className={classNames(projectcss.all, sty.data)}
              >
                <div
                  data-plasmic-name={"infoAndSorting"}
                  data-plasmic-override={overrides.infoAndSorting}
                  className={classNames(projectcss.all, sty.infoAndSorting)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__qLnz7
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return (
                            $queries.fetchCompanies.data.length +
                            " of " +
                            $queries.fetchCompanies.data.length +
                            " results"
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "1-20 of 1,685 results";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"sortFilter"}
                    data-plasmic-override={overrides.sortFilter}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.sortFilter)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__eIvyM
                      )}
                    >
                      {"Sort by"}
                    </div>
                    <AntdSelect
                      data-plasmic-name={"sortBy"}
                      data-plasmic-override={overrides.sortBy}
                      className={classNames("__wab_instance", sty.sortBy)}
                      defaultOpen={false}
                      defaultStylesClassName={classNames(
                        projectcss.root_reset,
                        projectcss.plasmic_default_styles,
                        projectcss.plasmic_mixins,
                        projectcss.plasmic_tokens,
                        plasmic_antd_5_hostless_css.plasmic_tokens,
                        plasmic_plasmic_rich_components_css.plasmic_tokens
                      )}
                      defaultValue={"name"}
                      onChange={generateStateOnChangeProp($state, [
                        "sortBy",
                        "value"
                      ])}
                      options={(() => {
                        const __composite = [
                          { value: null, label: null, type: "option" },
                          { value: null, label: null, type: "option" }
                        ];
                        __composite["0"]["value"] = "name";
                        __composite["0"]["label"] = "Name";
                        __composite["1"]["value"] = "rating";
                        __composite["1"]["label"] = "Rating";
                        return __composite;
                      })()}
                      placeholder={"Select..."}
                      popupScopeClassName={sty["sortBy__popup"]}
                      size={"middle"}
                      useChildren={false}
                      value={generateStateValueProp($state, [
                        "sortBy",
                        "value"
                      ])}
                    />
                  </Stack__>
                </div>
                {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                  (() => {
                    try {
                      return $queries.fetchCompanies.data;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()
                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                  const currentItem = __plasmic_item_0;
                  const currentIndex = __plasmic_idx_0;
                  return (
                    <CompanyCard
                      data-plasmic-name={"companyCard"}
                      data-plasmic-override={overrides.companyCard}
                      className={classNames("__wab_instance", sty.companyCard)}
                      companyEmail={(() => {
                        try {
                          return currentItem.contact_email;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      companyId={(() => {
                        try {
                          return currentItem.company_id;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      companyName={(() => {
                        try {
                          return currentItem.name;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      companyPhone={(() => {
                        try {
                          return currentItem.contact_phone;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      companyWebsite={(() => {
                        try {
                          return currentItem.website_url;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      key={currentIndex}
                      location={(() => {
                        try {
                          return currentItem.city + ", " + currentItem.country;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      reviewsCount={(() => {
                        try {
                          return currentItem.reviews;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      trustScore={(() => {
                        try {
                          return currentItem.trustScore;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                    />
                  );
                })}
                {(() => {
                  const child$Props = {
                    className: classNames("__wab_instance", sty.pagination),
                    current: generateStateValueProp($state, [
                      "pagination",
                      "currentPage"
                    ]),
                    defaultCurrent: 1,
                    defaultPageSize: 10,
                    hideOnSinglePage: true,
                    onChange: async (...eventArgs: any) => {
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "currentPage",
                        ["pagination", "currentPage"],
                        AntdPagination_Helpers
                      ).apply(null, eventArgs);
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "startIndex",
                        ["pagination", "startIndex"],
                        AntdPagination_Helpers
                      ).apply(null, eventArgs);
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "endIndex",
                        ["pagination", "endIndex"],
                        AntdPagination_Helpers
                      ).apply(null, eventArgs);
                    },
                    onShowSizeChange:
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "pageSize",
                        ["pagination", "pageSize"],
                        AntdPagination_Helpers
                      ),
                    pageSize: generateStateValueProp($state, [
                      "pagination",
                      "pageSize"
                    ]),
                    pageSizeOptions: [
                      { pageSize: 10 },
                      { pageSize: 20 },
                      { pageSize: 50 },
                      { pageSize: 100 }
                    ],
                    showLessItems: false,
                    showQuickJumper: false,
                    showSizeChanger: false,
                    simple: false,
                    size: "default",
                    total: undefined
                  };
                  initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "currentPage",
                        plasmicStateName: "pagination.currentPage"
                      },
                      {
                        name: "pageSize",
                        plasmicStateName: "pagination.pageSize"
                      },
                      {
                        name: "startIndex",
                        plasmicStateName: "pagination.startIndex"
                      },
                      {
                        name: "endIndex",
                        plasmicStateName: "pagination.endIndex"
                      }
                    ],
                    [],
                    AntdPagination_Helpers ?? {},
                    child$Props
                  );

                  return (
                    <AntdPagination
                      data-plasmic-name={"pagination"}
                      data-plasmic-override={overrides.pagination}
                      {...child$Props}
                    />
                  );
                })()}
              </Stack__>
            </div>
          </div>
          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "mainNavigation",
    "body",
    "header",
    "h1",
    "p",
    "tooltip",
    "list",
    "search",
    "filters",
    "rating",
    "radioGroupRating",
    "selectCountries",
    "inputCityOrZipCode",
    "checkboxVerified",
    "checkboxClaimed",
    "categoriesBadge",
    "data",
    "infoAndSorting",
    "sortFilter",
    "sortBy",
    "companyCard",
    "pagination",
    "footer"
  ],
  mainNavigation: ["mainNavigation"],
  body: [
    "body",
    "header",
    "h1",
    "p",
    "tooltip",
    "list",
    "search",
    "filters",
    "rating",
    "radioGroupRating",
    "selectCountries",
    "inputCityOrZipCode",
    "checkboxVerified",
    "checkboxClaimed",
    "categoriesBadge",
    "data",
    "infoAndSorting",
    "sortFilter",
    "sortBy",
    "companyCard",
    "pagination"
  ],
  header: ["header", "h1", "p", "tooltip"],
  h1: ["h1"],
  p: ["p"],
  tooltip: ["tooltip"],
  list: [
    "list",
    "search",
    "filters",
    "rating",
    "radioGroupRating",
    "selectCountries",
    "inputCityOrZipCode",
    "checkboxVerified",
    "checkboxClaimed",
    "categoriesBadge",
    "data",
    "infoAndSorting",
    "sortFilter",
    "sortBy",
    "companyCard",
    "pagination"
  ],
  search: [
    "search",
    "filters",
    "rating",
    "radioGroupRating",
    "selectCountries",
    "inputCityOrZipCode",
    "checkboxVerified",
    "checkboxClaimed",
    "categoriesBadge"
  ],
  filters: [
    "filters",
    "rating",
    "radioGroupRating",
    "selectCountries",
    "inputCityOrZipCode",
    "checkboxVerified",
    "checkboxClaimed",
    "categoriesBadge"
  ],
  rating: ["rating", "radioGroupRating"],
  radioGroupRating: ["radioGroupRating"],
  selectCountries: ["selectCountries"],
  inputCityOrZipCode: ["inputCityOrZipCode"],
  checkboxVerified: ["checkboxVerified"],
  checkboxClaimed: ["checkboxClaimed"],
  categoriesBadge: ["categoriesBadge"],
  data: [
    "data",
    "infoAndSorting",
    "sortFilter",
    "sortBy",
    "companyCard",
    "pagination"
  ],
  infoAndSorting: ["infoAndSorting", "sortFilter", "sortBy"],
  sortFilter: ["sortFilter", "sortBy"],
  sortBy: ["sortBy"],
  companyCard: ["companyCard"],
  pagination: ["pagination"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  mainNavigation: typeof MainNavigation;
  body: "div";
  header: "div";
  h1: "h1";
  p: "p";
  tooltip: typeof Tooltip;
  list: "div";
  search: "div";
  filters: "div";
  rating: "div";
  radioGroupRating: typeof AntdRadioGroup;
  selectCountries: typeof AntdSelect;
  inputCityOrZipCode: typeof AntdInput;
  checkboxVerified: typeof AntdCheckbox;
  checkboxClaimed: typeof AntdCheckbox;
  categoriesBadge: typeof Label;
  data: "div";
  infoAndSorting: "div";
  sortFilter: "div";
  sortBy: typeof AntdSelect;
  companyCard: typeof CompanyCard;
  pagination: typeof AntdPagination;
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCompaniesList__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCompaniesList__VariantsArgs;
    args?: PlasmicCompaniesList__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCompaniesList__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicCompaniesList__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCompaniesList__ArgProps,
          internalVariantPropNames: PlasmicCompaniesList__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCompaniesList__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCompaniesList";
  } else {
    func.displayName = `PlasmicCompaniesList.${nodeName}`;
  }
  return func;
}

function withPlasmicPageGuard<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const PageGuard: React.FC<P> = props => (
    <PlasmicPageGuard__
      minRole={null}
      appId={"uzL7MLDrNkZiDQaUBve1wf"}
      authorizeEndpoint={"https://studio.plasmic.app/authorize"}
      canTriggerLogin={true}
    >
      <WrappedComponent {...props} />
    </PlasmicPageGuard__>
  );

  return PageGuard;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "uzL7MLDrNkZiDQaUBve1wf"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicCompaniesList = Object.assign(
  // Top-level PlasmicCompaniesList renders the root element
  withUsePlasmicAuth(withPlasmicPageGuard(makeNodeComponent("root"))),
  {
    // Helper components rendering sub-elements
    mainNavigation: makeNodeComponent("mainNavigation"),
    body: makeNodeComponent("body"),
    header: makeNodeComponent("header"),
    h1: makeNodeComponent("h1"),
    p: makeNodeComponent("p"),
    tooltip: makeNodeComponent("tooltip"),
    list: makeNodeComponent("list"),
    search: makeNodeComponent("search"),
    filters: makeNodeComponent("filters"),
    rating: makeNodeComponent("rating"),
    radioGroupRating: makeNodeComponent("radioGroupRating"),
    selectCountries: makeNodeComponent("selectCountries"),
    inputCityOrZipCode: makeNodeComponent("inputCityOrZipCode"),
    checkboxVerified: makeNodeComponent("checkboxVerified"),
    checkboxClaimed: makeNodeComponent("checkboxClaimed"),
    categoriesBadge: makeNodeComponent("categoriesBadge"),
    data: makeNodeComponent("data"),
    infoAndSorting: makeNodeComponent("infoAndSorting"),
    sortFilter: makeNodeComponent("sortFilter"),
    sortBy: makeNodeComponent("sortBy"),
    companyCard: makeNodeComponent("companyCard"),
    pagination: makeNodeComponent("pagination"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicCompaniesList
    internalVariantProps: PlasmicCompaniesList__VariantProps,
    internalArgProps: PlasmicCompaniesList__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicCompaniesList;
/* prettier-ignore-end */
