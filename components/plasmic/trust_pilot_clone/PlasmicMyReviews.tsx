// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: uzL7MLDrNkZiDQaUBve1wf
// Component: TctOrN61lV

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import MainNavigation from "../../MainNavigation"; // plasmic-import: yAd4Bu3qCA/component
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import Footer from "../../Footer"; // plasmic-import: F_FUewQemGz/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_trust_pilot_clone.module.css"; // plasmic-import: uzL7MLDrNkZiDQaUBve1wf/projectcss
import sty from "./PlasmicMyReviews.module.css"; // plasmic-import: TctOrN61lV/css

createPlasmicElementProxy;

export type PlasmicMyReviews__VariantMembers = {};
export type PlasmicMyReviews__VariantsArgs = {};
type VariantPropType = keyof PlasmicMyReviews__VariantsArgs;
export const PlasmicMyReviews__VariantProps = new Array<VariantPropType>();

export type PlasmicMyReviews__ArgsType = {};
type ArgPropType = keyof PlasmicMyReviews__ArgsType;
export const PlasmicMyReviews__ArgProps = new Array<ArgPropType>();

export type PlasmicMyReviews__OverridesType = {
  root?: p.Flex<"div">;
  mainNavigation?: p.Flex<typeof MainNavigation>;
  body?: p.Flex<"div">;
  header?: p.Flex<"div">;
  content?: p.Flex<"div">;
  profile?: p.Flex<"div">;
  profileImage?: p.Flex<typeof p.PlasmicImg>;
  reviews?: p.Flex<"div">;
  reads?: p.Flex<"div">;
  useful?: p.Flex<"div">;
  columns?: p.Flex<"div">;
  reviewsList?: p.Flex<"div">;
  extras?: p.Flex<"div">;
  footer?: p.Flex<typeof Footer>;
};

export interface DefaultMyReviewsProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicMyReviews__RenderFunc(props: {
  variants: PlasmicMyReviews__VariantsArgs;
  args: PlasmicMyReviews__ArgsType;
  overrides: PlasmicMyReviews__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const dataSourcesCtx = usePlasmicDataSourceContext();

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <MainNavigation
            data-plasmic-name={"mainNavigation"}
            data-plasmic-override={overrides.mainNavigation}
            className={classNames("__wab_instance", sty.mainNavigation)}
          />

          <div
            data-plasmic-name={"body"}
            data-plasmic-override={overrides.body}
            className={classNames(projectcss.all, sty.body)}
          >
            <div
              data-plasmic-name={"header"}
              data-plasmic-override={overrides.header}
              className={classNames(projectcss.all, sty.header)}
            >
              <div
                data-plasmic-name={"content"}
                data-plasmic-override={overrides.content}
                className={classNames(projectcss.all, sty.content)}
              >
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"profile"}
                  data-plasmic-override={overrides.profile}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.profile)}
                >
                  <p.PlasmicImg
                    data-plasmic-name={"profileImage"}
                    data-plasmic-override={overrides.profileImage}
                    alt={""}
                    className={classNames(sty.profileImage)}
                    displayHeight={"72px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"72px"}
                    loading={"lazy"}
                  />

                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__eDpcn)}
                  >
                    <h4
                      className={classNames(
                        projectcss.all,
                        projectcss.h4,
                        projectcss.__wab_text,
                        sty.h4__kdAut
                      )}
                    >
                      {"Username"}
                    </h4>
                    <p
                      className={classNames(
                        projectcss.all,
                        projectcss.p,
                        projectcss.__wab_text,
                        sty.p___8Isi
                      )}
                    >
                      {"User location"}
                    </p>
                  </p.Stack>
                </p.Stack>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__vmu3)}
                >
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"reviews"}
                    data-plasmic-override={overrides.reviews}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.reviews)}
                  >
                    <h1
                      className={classNames(
                        projectcss.all,
                        projectcss.h1,
                        projectcss.__wab_text,
                        sty.h1__uXpnz
                      )}
                    >
                      {"0"}
                    </h1>
                    <AntdButton
                      className={classNames(
                        "__wab_instance",
                        sty.button__dAyCd
                      )}
                      size={"small"}
                      type={"link"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__vezoo
                        )}
                      >
                        {"Reviews"}
                      </div>
                    </AntdButton>
                  </p.Stack>
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"reads"}
                    data-plasmic-override={overrides.reads}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.reads)}
                  >
                    <h1
                      className={classNames(
                        projectcss.all,
                        projectcss.h1,
                        projectcss.__wab_text,
                        sty.h1__xiTY
                      )}
                    >
                      {"0"}
                    </h1>
                    <AntdButton
                      className={classNames(
                        "__wab_instance",
                        sty.button___2RHvB
                      )}
                      size={"small"}
                      type={"link"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__mfr1J
                        )}
                      >
                        {"Reads"}
                      </div>
                    </AntdButton>
                  </p.Stack>
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"useful"}
                    data-plasmic-override={overrides.useful}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.useful)}
                  >
                    <h1
                      className={classNames(
                        projectcss.all,
                        projectcss.h1,
                        projectcss.__wab_text,
                        sty.h1__sdwnq
                      )}
                    >
                      {"0"}
                    </h1>
                    <AntdButton
                      className={classNames(
                        "__wab_instance",
                        sty.button__r04Vg
                      )}
                      size={"small"}
                      type={"link"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__jet1W
                        )}
                      >
                        {"Useful"}
                      </div>
                    </AntdButton>
                  </p.Stack>
                </p.Stack>
              </div>
            </div>
            <div
              data-plasmic-name={"columns"}
              data-plasmic-override={overrides.columns}
              className={classNames(projectcss.all, sty.columns)}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"reviewsList"}
                data-plasmic-override={overrides.reviewsList}
                hasGap={true}
                className={classNames(projectcss.all, sty.reviewsList)}
              >
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__n5MBr)}
                >
                  <h4
                    className={classNames(
                      projectcss.all,
                      projectcss.h4,
                      projectcss.__wab_text,
                      sty.h4___7ZxEc
                    )}
                  >
                    {"Write your first review"}
                  </h4>
                  <p
                    className={classNames(
                      projectcss.all,
                      projectcss.p,
                      projectcss.__wab_text,
                      sty.p___3CWvW
                    )}
                  >
                    {
                      "Share your experience! Your feedback will empower others to shop with confidence and help companies improve."
                    }
                  </p>
                </p.Stack>
                <AntdButton
                  className={classNames("__wab_instance", sty.button__xHYlY)}
                  shape={"round"}
                  size={"large"}
                  type={"primary"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__xKtKj
                    )}
                  >
                    {"Find a company"}
                  </div>
                </AntdButton>
              </p.Stack>
              <div
                data-plasmic-name={"extras"}
                data-plasmic-override={overrides.extras}
                className={classNames(projectcss.all, sty.extras)}
              />
            </div>
          </div>
          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "mainNavigation",
    "body",
    "header",
    "content",
    "profile",
    "profileImage",
    "reviews",
    "reads",
    "useful",
    "columns",
    "reviewsList",
    "extras",
    "footer"
  ],
  mainNavigation: ["mainNavigation"],
  body: [
    "body",
    "header",
    "content",
    "profile",
    "profileImage",
    "reviews",
    "reads",
    "useful",
    "columns",
    "reviewsList",
    "extras"
  ],
  header: [
    "header",
    "content",
    "profile",
    "profileImage",
    "reviews",
    "reads",
    "useful"
  ],
  content: ["content", "profile", "profileImage", "reviews", "reads", "useful"],
  profile: ["profile", "profileImage"],
  profileImage: ["profileImage"],
  reviews: ["reviews"],
  reads: ["reads"],
  useful: ["useful"],
  columns: ["columns", "reviewsList", "extras"],
  reviewsList: ["reviewsList"],
  extras: ["extras"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  mainNavigation: typeof MainNavigation;
  body: "div";
  header: "div";
  content: "div";
  profile: "div";
  profileImage: typeof p.PlasmicImg;
  reviews: "div";
  reads: "div";
  useful: "div";
  columns: "div";
  reviewsList: "div";
  extras: "div";
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMyReviews__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicMyReviews__VariantsArgs;
    args?: PlasmicMyReviews__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicMyReviews__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicMyReviews__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicMyReviews__ArgProps,
          internalVariantPropNames: PlasmicMyReviews__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicMyReviews__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMyReviews";
  } else {
    func.displayName = `PlasmicMyReviews.${nodeName}`;
  }
  return func;
}

function withPlasmicPageGuard<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const PageGuard: React.FC<P> = props => (
    <p.PlasmicPageGuard
      minRole={"4d9b94b7-5067-41d5-bb18-b0b97eba2313"}
      appId={"uzL7MLDrNkZiDQaUBve1wf"}
      authorizeEndpoint={"https://studio.plasmic.app/authorize"}
      canTriggerLogin={true}
    >
      <WrappedComponent {...props} />
    </p.PlasmicPageGuard>
  );

  return PageGuard;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "uzL7MLDrNkZiDQaUBve1wf"
    });

    return (
      <p.PlasmicDataSourceContextProvider
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </p.PlasmicDataSourceContextProvider>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicMyReviews = Object.assign(
  // Top-level PlasmicMyReviews renders the root element
  withUsePlasmicAuth(withPlasmicPageGuard(makeNodeComponent("root"))),
  {
    // Helper components rendering sub-elements
    mainNavigation: makeNodeComponent("mainNavigation"),
    body: makeNodeComponent("body"),
    header: makeNodeComponent("header"),
    content: makeNodeComponent("content"),
    profile: makeNodeComponent("profile"),
    profileImage: makeNodeComponent("profileImage"),
    reviews: makeNodeComponent("reviews"),
    reads: makeNodeComponent("reads"),
    useful: makeNodeComponent("useful"),
    columns: makeNodeComponent("columns"),
    reviewsList: makeNodeComponent("reviewsList"),
    extras: makeNodeComponent("extras"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicMyReviews
    internalVariantProps: PlasmicMyReviews__VariantProps,
    internalArgProps: PlasmicMyReviews__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicMyReviews;
/* prettier-ignore-end */
