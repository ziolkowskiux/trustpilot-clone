// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: uzL7MLDrNkZiDQaUBve1wf
// Component: _vOq5FSptHrw

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { AntdCheckbox } from "@plasmicpkgs/antd5/skinny/registerCheckbox";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_trust_pilot_clone.module.css"; // plasmic-import: uzL7MLDrNkZiDQaUBve1wf/projectcss
import sty from "./PlasmicReviewsSummaryPercentageBar.module.css"; // plasmic-import: _vOq5FSptHrw/css

createPlasmicElementProxy;

export type PlasmicReviewsSummaryPercentageBar__VariantMembers = {};
export type PlasmicReviewsSummaryPercentageBar__VariantsArgs = {};
type VariantPropType = keyof PlasmicReviewsSummaryPercentageBar__VariantsArgs;
export const PlasmicReviewsSummaryPercentageBar__VariantProps =
  new Array<VariantPropType>();

export type PlasmicReviewsSummaryPercentageBar__ArgsType = {
  onRatingBarCheckedChange?: (val: boolean) => void;
  label?: string;
  value?: string;
  fillColor?: string;
  valueNum?: number;
};
type ArgPropType = keyof PlasmicReviewsSummaryPercentageBar__ArgsType;
export const PlasmicReviewsSummaryPercentageBar__ArgProps =
  new Array<ArgPropType>(
    "onRatingBarCheckedChange",
    "label",
    "value",
    "fillColor",
    "valueNum"
  );

export type PlasmicReviewsSummaryPercentageBar__OverridesType = {
  withRating?: p.Flex<"label">;
  checkbox?: p.Flex<typeof AntdCheckbox>;
  text?: p.Flex<"div">;
  bar?: p.Flex<"div">;
  percentageBar?: p.Flex<"div">;
  percentageValue?: p.Flex<"div">;
};

export interface DefaultReviewsSummaryPercentageBarProps {
  onRatingBarCheckedChange?: (val: boolean) => void;
  label?: string;
  value?: string;
  fillColor?: string;
  valueNum?: number;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicReviewsSummaryPercentageBar__RenderFunc(props: {
  variants: PlasmicReviewsSummaryPercentageBar__VariantsArgs;
  args: PlasmicReviewsSummaryPercentageBar__ArgsType;
  overrides: PlasmicReviewsSummaryPercentageBar__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          label: "?-star",
          value: "0",
          fillColor: "#27ae60",
          valueNum: 10
        },
        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof p.useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "checkbox.checked",
        type: "readonly",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onChangeProp: "onRatingBarCheckedChange"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const [isWithRatingHover, triggerWithRatingHoverProps] = useTrigger(
    "useHover",
    {}
  );
  const triggers = {
    hover_withRating: isWithRatingHover
  };

  return (
    <p.Stack
      as={"label"}
      data-plasmic-name={"withRating"}
      data-plasmic-override={overrides.withRating}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.withRating
      )}
      data-plasmic-trigger-props={[triggerWithRatingHoverProps]}
    >
      <AntdCheckbox
        data-plasmic-name={"checkbox"}
        data-plasmic-override={overrides.checkbox}
        checked={p.generateStateValueProp($state, ["checkbox", "checked"])}
        className={classNames("__wab_instance", sty.checkbox)}
        onChange={p.generateStateOnChangeProp($state, ["checkbox", "checked"])}
      >
        <div
          data-plasmic-name={"text"}
          data-plasmic-override={overrides.text}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return $props.label;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "?-star";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </div>
      </AntdCheckbox>
      <div
        data-plasmic-name={"bar"}
        data-plasmic-override={overrides.bar}
        className={classNames(projectcss.all, sty.bar)}
      >
        <div
          data-plasmic-name={"percentageBar"}
          data-plasmic-override={overrides.percentageBar}
          className={classNames(projectcss.all, sty.percentageBar)}
          style={
            triggers.hover_withRating
              ? (() => {
                  try {
                    return {
                      width: $props.value + "%",
                      backgroundColor: $props.fillColor
                    };
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()
              : (() => {
                  try {
                    return { width: $props.value + "%" };
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()
          }
        />
      </div>
      <div
        data-plasmic-name={"percentageValue"}
        data-plasmic-override={overrides.percentageValue}
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.percentageValue
        )}
      >
        <React.Fragment>
          {(() => {
            try {
              return String($props.valueNum).concat("", "%");
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return "99.9%";
              }
              throw e;
            }
          })()}
        </React.Fragment>
      </div>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  withRating: [
    "withRating",
    "checkbox",
    "text",
    "bar",
    "percentageBar",
    "percentageValue"
  ],
  checkbox: ["checkbox", "text"],
  text: ["text"],
  bar: ["bar", "percentageBar"],
  percentageBar: ["percentageBar"],
  percentageValue: ["percentageValue"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  withRating: "label";
  checkbox: typeof AntdCheckbox;
  text: "div";
  bar: "div";
  percentageBar: "div";
  percentageValue: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicReviewsSummaryPercentageBar__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicReviewsSummaryPercentageBar__VariantsArgs;
    args?: PlasmicReviewsSummaryPercentageBar__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit< // Specify variants directly as props
    PlasmicReviewsSummaryPercentageBar__VariantsArgs,
    ReservedPropsType
  > &
    /* Specify args directly as props*/ Omit<
      PlasmicReviewsSummaryPercentageBar__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicReviewsSummaryPercentageBar__ArgProps,
          internalVariantPropNames:
            PlasmicReviewsSummaryPercentageBar__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicReviewsSummaryPercentageBar__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "withRating") {
    func.displayName = "PlasmicReviewsSummaryPercentageBar";
  } else {
    func.displayName = `PlasmicReviewsSummaryPercentageBar.${nodeName}`;
  }
  return func;
}

export const PlasmicReviewsSummaryPercentageBar = Object.assign(
  // Top-level PlasmicReviewsSummaryPercentageBar renders the root element
  makeNodeComponent("withRating"),
  {
    // Helper components rendering sub-elements
    checkbox: makeNodeComponent("checkbox"),
    text: makeNodeComponent("text"),
    bar: makeNodeComponent("bar"),
    percentageBar: makeNodeComponent("percentageBar"),
    percentageValue: makeNodeComponent("percentageValue"),

    // Metadata about props expected for PlasmicReviewsSummaryPercentageBar
    internalVariantProps: PlasmicReviewsSummaryPercentageBar__VariantProps,
    internalArgProps: PlasmicReviewsSummaryPercentageBar__ArgProps
  }
);

export default PlasmicReviewsSummaryPercentageBar;
/* prettier-ignore-end */
