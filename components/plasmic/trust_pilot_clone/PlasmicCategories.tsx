// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: uzL7MLDrNkZiDQaUBve1wf
// Component: TbqF7dSOyn

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import MainNavigation from "../../MainNavigation"; // plasmic-import: yAd4Bu3qCA/component
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import CategoryCardList from "../../CategoryCardList"; // plasmic-import: TJhZvJpEpm/component
import Footer from "../../Footer"; // plasmic-import: F_FUewQemGz/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_trust_pilot_clone.module.css"; // plasmic-import: uzL7MLDrNkZiDQaUBve1wf/projectcss
import sty from "./PlasmicCategories.module.css"; // plasmic-import: TbqF7dSOyn/css

createPlasmicElementProxy;

export type PlasmicCategories__VariantMembers = {};
export type PlasmicCategories__VariantsArgs = {};
type VariantPropType = keyof PlasmicCategories__VariantsArgs;
export const PlasmicCategories__VariantProps = new Array<VariantPropType>();

export type PlasmicCategories__ArgsType = {};
type ArgPropType = keyof PlasmicCategories__ArgsType;
export const PlasmicCategories__ArgProps = new Array<ArgPropType>();

export type PlasmicCategories__OverridesType = {
  root?: p.Flex<"div">;
  mainNavigation?: p.Flex<typeof MainNavigation>;
  body?: p.Flex<"div">;
  header?: p.Flex<"div">;
  h2?: p.Flex<"h2">;
  input?: p.Flex<typeof AntdInput>;
  categories?: p.Flex<"div">;
  h4?: p.Flex<"h4">;
  freeBox?: p.Flex<"div">;
  categoryCardList?: p.Flex<typeof CategoryCardList>;
  footer?: p.Flex<typeof Footer>;
};

export interface DefaultCategoriesProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicCategories__RenderFunc(props: {
  variants: PlasmicCategories__VariantsArgs;
  args: PlasmicCategories__ArgsType;
  overrides: PlasmicCategories__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof p.useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "input.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: p.generateOnMutateForSpec("value", AntdInput_Helpers)
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    fetchCategories: usePlasmicDataOp(() => {
      return {
        sourceId: "czoZTBwvV8zZJLNVxj78Sv",
        opId: "b481a734-d245-42bb-b4d6-f1167f9a30ff",
        userArgs: {},
        cacheKey: `plasmic.$.b481a734-d245-42bb-b4d6-f1167f9a30ff.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    fetchSubcategories: usePlasmicDataOp(() => {
      return {
        sourceId: "czoZTBwvV8zZJLNVxj78Sv",
        opId: "8cb7d4e9-a046-4874-b9b9-14bf8713226f",
        userArgs: {},
        cacheKey: `plasmic.$.8cb7d4e9-a046-4874-b9b9-14bf8713226f.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <MainNavigation
            data-plasmic-name={"mainNavigation"}
            data-plasmic-override={overrides.mainNavigation}
            className={classNames("__wab_instance", sty.mainNavigation)}
          />

          <div
            data-plasmic-name={"body"}
            data-plasmic-override={overrides.body}
            className={classNames(projectcss.all, sty.body)}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"header"}
              data-plasmic-override={overrides.header}
              hasGap={true}
              className={classNames(projectcss.all, sty.header)}
            >
              <h2
                data-plasmic-name={"h2"}
                data-plasmic-override={overrides.h2}
                className={classNames(
                  projectcss.all,
                  projectcss.h2,
                  projectcss.__wab_text,
                  sty.h2
                )}
              >
                {"What are you looking for?"}
              </h2>
              {(() => {
                const child$Props = {
                  className: classNames("__wab_instance", sty.input),
                  onChange: p.generateStateOnChangePropForCodeComponents(
                    $state,
                    "value",
                    ["input", "value"],
                    AntdInput_Helpers
                  ),
                  value: p.generateStateValueProp($state, ["input", "value"])
                };
                p.initializeCodeComponentStates(
                  $state,
                  [
                    {
                      name: "value",
                      plasmicStateName: "input.value"
                    }
                  ],
                  [],
                  AntdInput_Helpers ?? {},
                  child$Props
                );

                return (
                  <AntdInput
                    data-plasmic-name={"input"}
                    data-plasmic-override={overrides.input}
                    {...child$Props}
                  />
                );
              })()}
            </p.Stack>
            <p.Stack
              as={"div"}
              data-plasmic-name={"categories"}
              data-plasmic-override={overrides.categories}
              hasGap={true}
              className={classNames(projectcss.all, sty.categories)}
            >
              <h4
                data-plasmic-name={"h4"}
                data-plasmic-override={overrides.h4}
                className={classNames(
                  projectcss.all,
                  projectcss.h4,
                  projectcss.__wab_text,
                  sty.h4
                )}
              >
                {"Explore companies by category"}
              </h4>
              <div
                data-plasmic-name={"freeBox"}
                data-plasmic-override={overrides.freeBox}
                className={classNames(projectcss.all, sty.freeBox)}
              >
                {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                  (() => {
                    try {
                      return $queries.fetchCategories.data;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()
                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                  const currentItem = __plasmic_item_0;
                  const currentIndex = __plasmic_idx_0;
                  return (
                    <CategoryCardList
                      data-plasmic-name={"categoryCardList"}
                      data-plasmic-override={overrides.categoryCardList}
                      categoryIcon={(() => {
                        try {
                          return currentItem.icon;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      categoryLink={`/companies-list/${(() => {
                        try {
                          return currentItem.name;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}`}
                      categoryName={(() => {
                        try {
                          return currentItem.name;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      className={classNames(
                        "__wab_instance",
                        sty.categoryCardList
                      )}
                      key={currentIndex}
                      subcategories={(() => {
                        try {
                          return $queries.fetchSubcategories.data.filter(
                            item => item.category === currentItem.name
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                    />
                  );
                })}
              </div>
            </p.Stack>
          </div>
          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "mainNavigation",
    "body",
    "header",
    "h2",
    "input",
    "categories",
    "h4",
    "freeBox",
    "categoryCardList",
    "footer"
  ],
  mainNavigation: ["mainNavigation"],
  body: [
    "body",
    "header",
    "h2",
    "input",
    "categories",
    "h4",
    "freeBox",
    "categoryCardList"
  ],
  header: ["header", "h2", "input"],
  h2: ["h2"],
  input: ["input"],
  categories: ["categories", "h4", "freeBox", "categoryCardList"],
  h4: ["h4"],
  freeBox: ["freeBox", "categoryCardList"],
  categoryCardList: ["categoryCardList"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  mainNavigation: typeof MainNavigation;
  body: "div";
  header: "div";
  h2: "h2";
  input: typeof AntdInput;
  categories: "div";
  h4: "h4";
  freeBox: "div";
  categoryCardList: typeof CategoryCardList;
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCategories__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCategories__VariantsArgs;
    args?: PlasmicCategories__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCategories__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicCategories__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCategories__ArgProps,
          internalVariantPropNames: PlasmicCategories__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCategories__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCategories";
  } else {
    func.displayName = `PlasmicCategories.${nodeName}`;
  }
  return func;
}

function withPlasmicPageGuard<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const PageGuard: React.FC<P> = props => (
    <p.PlasmicPageGuard
      minRole={null}
      appId={"uzL7MLDrNkZiDQaUBve1wf"}
      authorizeEndpoint={"https://studio.plasmic.app/authorize"}
      canTriggerLogin={true}
    >
      <WrappedComponent {...props} />
    </p.PlasmicPageGuard>
  );

  return PageGuard;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "uzL7MLDrNkZiDQaUBve1wf"
    });

    return (
      <p.PlasmicDataSourceContextProvider
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </p.PlasmicDataSourceContextProvider>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicCategories = Object.assign(
  // Top-level PlasmicCategories renders the root element
  withUsePlasmicAuth(withPlasmicPageGuard(makeNodeComponent("root"))),
  {
    // Helper components rendering sub-elements
    mainNavigation: makeNodeComponent("mainNavigation"),
    body: makeNodeComponent("body"),
    header: makeNodeComponent("header"),
    h2: makeNodeComponent("h2"),
    input: makeNodeComponent("input"),
    categories: makeNodeComponent("categories"),
    h4: makeNodeComponent("h4"),
    freeBox: makeNodeComponent("freeBox"),
    categoryCardList: makeNodeComponent("categoryCardList"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicCategories
    internalVariantProps: PlasmicCategories__VariantProps,
    internalArgProps: PlasmicCategories__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicCategories;
/* prettier-ignore-end */
