// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: uzL7MLDrNkZiDQaUBve1wf
// Component: pRzZD4AnBwq

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import CompanyCardContactInfo from "../../CompanyCardContactInfo"; // plasmic-import: u5SO6SlWaMIn/component
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { SliderWrapper } from "@plasmicpkgs/react-slick";
import { sliderHelpers as SliderWrapper_Helpers } from "@plasmicpkgs/react-slick";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_trust_pilot_clone.module.css"; // plasmic-import: uzL7MLDrNkZiDQaUBve1wf/projectcss
import sty from "./PlasmicCompanyCard.module.css"; // plasmic-import: pRzZD4AnBwq/css

createPlasmicElementProxy;

export type PlasmicCompanyCard__VariantMembers = {
  reviewsVisible: "reviewsVisible";
};
export type PlasmicCompanyCard__VariantsArgs = {
  reviewsVisible?: SingleBooleanChoiceArg<"reviewsVisible">;
};
type VariantPropType = keyof PlasmicCompanyCard__VariantsArgs;
export const PlasmicCompanyCard__VariantProps = new Array<VariantPropType>(
  "reviewsVisible"
);

export type PlasmicCompanyCard__ArgsType = {
  companyLogo?: React.ComponentProps<typeof p.PlasmicImg>["src"];
  companyName?: string;
  trustScore?: string;
  reviewsCount?: number;
  location?: string;
  companyWebsite?: string;
  companyEmail?: string;
  companyPhone?: string;
  companyId?: string;
};
type ArgPropType = keyof PlasmicCompanyCard__ArgsType;
export const PlasmicCompanyCard__ArgProps = new Array<ArgPropType>(
  "companyLogo",
  "companyName",
  "trustScore",
  "reviewsCount",
  "location",
  "companyWebsite",
  "companyEmail",
  "companyPhone",
  "companyId"
);

export type PlasmicCompanyCard__OverridesType = {
  companyCard?: p.Flex<"div">;
  basicInformation?: p.Flex<"a"> & Partial<LinkProps>;
  companyLogo?: p.Flex<typeof p.PlasmicImg>;
  companyName?: p.Flex<"h5">;
  trustScore?: p.Flex<"p">;
  reviewsCount?: p.Flex<"p">;
  location?: p.Flex<"p">;
  label?: p.Flex<"label">;
  footer?: p.Flex<"div">;
  companyCardContactInfo?: p.Flex<typeof CompanyCardContactInfo>;
  button?: p.Flex<typeof AntdButton>;
  text?: p.Flex<"div">;
  reviews?: p.Flex<typeof SliderWrapper>;
};

export interface DefaultCompanyCardProps {
  companyLogo?: React.ComponentProps<typeof p.PlasmicImg>["src"];
  companyName?: string;
  trustScore?: string;
  reviewsCount?: number;
  location?: string;
  companyWebsite?: string;
  companyEmail?: string;
  companyPhone?: string;
  companyId?: string;
  reviewsVisible?: SingleBooleanChoiceArg<"reviewsVisible">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicCompanyCard__RenderFunc(props: {
  variants: PlasmicCompanyCard__VariantsArgs;
  args: PlasmicCompanyCard__ArgsType;
  overrides: PlasmicCompanyCard__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          companyName: "Company name",
          trustScore: "0.00",
          reviewsCount: 0,
          location: "Location",
          companyWebsite: `/`
        },
        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof p.useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "reviewsVisible",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.reviewsVisible
      },
      {
        path: "reviews.currentSlide",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0,

        refName: "reviews",
        onMutate: p.generateOnMutateForSpec(
          "currentSlide",
          SliderWrapper_Helpers
        )
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"companyCard"}
      data-plasmic-override={overrides.companyCard}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.companyCard
      )}
    >
      <p.Stack
        as={p.PlasmicLink}
        data-plasmic-name={"basicInformation"}
        data-plasmic-override={overrides.basicInformation}
        hasGap={true}
        className={classNames(
          projectcss.all,
          projectcss.a,
          sty.basicInformation
        )}
        component={Link}
        onClick={async event => {
          const $steps = {};

          $steps["goToCompanyReviews"] = true
            ? (() => {
                const actionArgs = {
                  destination: `/review/${(() => {
                    try {
                      return $props.companyId;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}`
                };
                return (({ destination }) => {
                  if (
                    typeof destination === "string" &&
                    destination.startsWith("#")
                  ) {
                    document
                      .getElementById(destination.substr(1))
                      .scrollIntoView({ behavior: "smooth" });
                  } else {
                    __nextRouter?.push(destination);
                  }
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["goToCompanyReviews"] != null &&
            typeof $steps["goToCompanyReviews"] === "object" &&
            typeof $steps["goToCompanyReviews"].then === "function"
          ) {
            $steps["goToCompanyReviews"] = await $steps["goToCompanyReviews"];
          }
        }}
        platform={"nextjs"}
      >
        <p.PlasmicImg
          data-plasmic-name={"companyLogo"}
          data-plasmic-override={overrides.companyLogo}
          alt={""}
          className={classNames(sty.companyLogo)}
          displayHeight={"auto"}
          displayMaxHeight={"none"}
          displayMaxWidth={"100%"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"auto"}
          loading={"lazy"}
          src={args.companyLogo}
        />

        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__zzX70, {
            [sty.freeBoxreviewsVisible__zzX70EOoyo]: hasVariant(
              $state,
              "reviewsVisible",
              "reviewsVisible"
            )
          })}
        >
          <h5
            data-plasmic-name={"companyName"}
            data-plasmic-override={overrides.companyName}
            className={classNames(
              projectcss.all,
              projectcss.h5,
              projectcss.__wab_text,
              sty.companyName
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $props.companyName;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "Company name";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </h5>
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__c2Gs)}
          >
            <p
              data-plasmic-name={"trustScore"}
              data-plasmic-override={overrides.trustScore}
              className={classNames(
                projectcss.all,
                projectcss.p,
                projectcss.__wab_text,
                sty.trustScore
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return "TrustScore " + $props.trustScore;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "TrustScore";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </p>
            <p
              data-plasmic-name={"reviewsCount"}
              data-plasmic-override={overrides.reviewsCount}
              className={classNames(
                projectcss.all,
                projectcss.p,
                projectcss.__wab_text,
                sty.reviewsCount
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $props.reviewsCount + " reviews";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "Reviews count";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </p>
          </p.Stack>
          <p
            data-plasmic-name={"location"}
            data-plasmic-override={overrides.location}
            className={classNames(
              projectcss.all,
              projectcss.p,
              projectcss.__wab_text,
              sty.location
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $props.location;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "Location";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </p>
        </p.Stack>
        <div className={classNames(projectcss.all, sty.freeBox__dRgSp)}>
          <label
            data-plasmic-name={"label"}
            data-plasmic-override={overrides.label}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.label
            )}
          >
            {"tag name"}
          </label>
        </div>
      </p.Stack>
      <p.Stack
        as={"div"}
        data-plasmic-name={"footer"}
        data-plasmic-override={overrides.footer}
        hasGap={true}
        className={classNames(projectcss.all, sty.footer, {
          [sty.footerreviewsVisible]: hasVariant(
            $state,
            "reviewsVisible",
            "reviewsVisible"
          )
        })}
      >
        <div className={classNames(projectcss.all, sty.freeBox__bfX)}>
          <CompanyCardContactInfo
            data-plasmic-name={"companyCardContactInfo"}
            data-plasmic-override={overrides.companyCardContactInfo}
            className={classNames("__wab_instance", sty.companyCardContactInfo)}
            companyPhone={args.companyPhone}
          />

          <AntdButton
            data-plasmic-name={"button"}
            data-plasmic-override={overrides.button}
            className={classNames("__wab_instance", sty.button, {
              [sty.buttonreviewsVisible]: hasVariant(
                $state,
                "reviewsVisible",
                "reviewsVisible"
              )
            })}
            onClick={async () => {
              const $steps = {};

              $steps["updateReviewsVisible"] = true
                ? (() => {
                    const actionArgs = {
                      vgroup: "reviewsVisible",
                      operation: 2,
                      value: "reviewsVisible"
                    };
                    return (({ vgroup, value }) => {
                      if (typeof value === "string") {
                        value = [value];
                      }

                      const oldValue = p.get($state, vgroup);
                      p.set($state, vgroup, !oldValue);
                      return !oldValue;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateReviewsVisible"] != null &&
                typeof $steps["updateReviewsVisible"] === "object" &&
                typeof $steps["updateReviewsVisible"].then === "function"
              ) {
                $steps["updateReviewsVisible"] = await $steps[
                  "updateReviewsVisible"
                ];
              }
            }}
            size={"small"}
            type={"text"}
          >
            <div
              data-plasmic-name={"text"}
              data-plasmic-override={overrides.text}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text
              )}
            >
              {"Latest Reviews"}
            </div>
          </AntdButton>
        </div>
        {(() => {
          const child$Props = {
            beforeChange: p.generateStateOnChangePropForCodeComponents(
              $state,
              "currentSlide",
              ["reviews", "currentSlide"],
              SliderWrapper_Helpers
            ),
            className: classNames("__wab_instance", sty.reviews, {
              [sty.reviewsreviewsVisible]: hasVariant(
                $state,
                "reviewsVisible",
                "reviewsVisible"
              )
            }),
            initialSlide: p.generateStateValueProp($state, [
              "reviews",
              "currentSlide"
            ]),
            ref: ref => {
              $refs["reviews"] = ref;
            },
            sliderScopeClassName: sty["reviews__slider"]
          };
          p.initializeCodeComponentStates(
            $state,
            [
              {
                name: "currentSlide",
                plasmicStateName: "reviews.currentSlide"
              }
            ],
            [],
            SliderWrapper_Helpers ?? {},
            child$Props
          );

          return (
            <SliderWrapper
              data-plasmic-name={"reviews"}
              data-plasmic-override={overrides.reviews}
              {...child$Props}
            >
              <div className={classNames(projectcss.all, sty.freeBox__nNOgs)}>
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__b87A5)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  src={
                    "https://static1.plasmic.app/components/react-slick/slide1.png"
                  }
                />
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__byWmA)}>
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__llJti)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  src={
                    "https://static1.plasmic.app/components/react-slick/slide2.png"
                  }
                />
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__tfW3G)}>
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__afEEk)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  src={
                    "https://static1.plasmic.app/components/react-slick/slide3.png"
                  }
                />
              </div>
            </SliderWrapper>
          );
        })()}
      </p.Stack>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  companyCard: [
    "companyCard",
    "basicInformation",
    "companyLogo",
    "companyName",
    "trustScore",
    "reviewsCount",
    "location",
    "label",
    "footer",
    "companyCardContactInfo",
    "button",
    "text",
    "reviews"
  ],
  basicInformation: [
    "basicInformation",
    "companyLogo",
    "companyName",
    "trustScore",
    "reviewsCount",
    "location",
    "label"
  ],
  companyLogo: ["companyLogo"],
  companyName: ["companyName"],
  trustScore: ["trustScore"],
  reviewsCount: ["reviewsCount"],
  location: ["location"],
  label: ["label"],
  footer: ["footer", "companyCardContactInfo", "button", "text", "reviews"],
  companyCardContactInfo: ["companyCardContactInfo"],
  button: ["button", "text"],
  text: ["text"],
  reviews: ["reviews"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  companyCard: "div";
  basicInformation: "a";
  companyLogo: typeof p.PlasmicImg;
  companyName: "h5";
  trustScore: "p";
  reviewsCount: "p";
  location: "p";
  label: "label";
  footer: "div";
  companyCardContactInfo: typeof CompanyCardContactInfo;
  button: typeof AntdButton;
  text: "div";
  reviews: typeof SliderWrapper;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCompanyCard__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCompanyCard__VariantsArgs;
    args?: PlasmicCompanyCard__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCompanyCard__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicCompanyCard__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCompanyCard__ArgProps,
          internalVariantPropNames: PlasmicCompanyCard__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCompanyCard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "companyCard") {
    func.displayName = "PlasmicCompanyCard";
  } else {
    func.displayName = `PlasmicCompanyCard.${nodeName}`;
  }
  return func;
}

export const PlasmicCompanyCard = Object.assign(
  // Top-level PlasmicCompanyCard renders the root element
  makeNodeComponent("companyCard"),
  {
    // Helper components rendering sub-elements
    basicInformation: makeNodeComponent("basicInformation"),
    companyLogo: makeNodeComponent("companyLogo"),
    companyName: makeNodeComponent("companyName"),
    trustScore: makeNodeComponent("trustScore"),
    reviewsCount: makeNodeComponent("reviewsCount"),
    location: makeNodeComponent("location"),
    label: makeNodeComponent("label"),
    footer: makeNodeComponent("footer"),
    companyCardContactInfo: makeNodeComponent("companyCardContactInfo"),
    button: makeNodeComponent("button"),
    text: makeNodeComponent("text"),
    reviews: makeNodeComponent("reviews"),

    // Metadata about props expected for PlasmicCompanyCard
    internalVariantProps: PlasmicCompanyCard__VariantProps,
    internalArgProps: PlasmicCompanyCard__ArgProps
  }
);

export default PlasmicCompanyCard;
/* prettier-ignore-end */
