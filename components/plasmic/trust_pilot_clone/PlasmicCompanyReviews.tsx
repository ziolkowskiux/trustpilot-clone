// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: uzL7MLDrNkZiDQaUBve1wf
// Component: HZaKTNznB8MJ

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import MainNavigation from "../../MainNavigation"; // plasmic-import: yAd4Bu3qCA/component
import PathBreadcrumb from "../../PathBreadcrumb"; // plasmic-import: 829KtCjh8CIv/component
import WebsiteAddressCard from "../../WebsiteAddressCard"; // plasmic-import: hWfONOgVJn4L/component
import WriteAReview from "../../WriteAReview"; // plasmic-import: M5Xk5pdCttsu/component
import ReviewsSummary from "../../ReviewsSummary"; // plasmic-import: _WBWxb6k6npY/component
import ReviewCard from "../../ReviewCard"; // plasmic-import: rJiDAmiPUpjj/component
import { AntdPagination } from "@plasmicpkgs/antd5/skinny/registerPagination";
import { paginationHelpers as AntdPagination_Helpers } from "@plasmicpkgs/antd5/skinny/registerPagination";
import Card from "../../Card"; // plasmic-import: I7kjAJ4INnHj/component
import CompanyActivityTags from "../../CompanyActivityTags"; // plasmic-import: 1RfhwdtRup_T/component
import Footer from "../../Footer"; // plasmic-import: F_FUewQemGz/component
import { AntdDrawer } from "@plasmicpkgs/antd5/skinny/registerDrawer";
import Label from "../../Label"; // plasmic-import: W1OlkHb9N4/component
import { AntdCheckbox } from "@plasmicpkgs/antd5/skinny/registerCheckbox";
import { AntdRadioGroup } from "@plasmicpkgs/antd5/skinny/registerRadio";
import { AntdRadio } from "@plasmicpkgs/antd5/skinny/registerRadio";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_trust_pilot_clone.module.css"; // plasmic-import: uzL7MLDrNkZiDQaUBve1wf/projectcss
import sty from "./PlasmicCompanyReviews.module.css"; // plasmic-import: HZaKTNznB8MJ/css

import XIcon from "./icons/PlasmicIcon__X"; // plasmic-import: GLcyIp_DFO/icon

createPlasmicElementProxy;

export type PlasmicCompanyReviews__VariantMembers = {};
export type PlasmicCompanyReviews__VariantsArgs = {};
type VariantPropType = keyof PlasmicCompanyReviews__VariantsArgs;
export const PlasmicCompanyReviews__VariantProps = new Array<VariantPropType>();

export type PlasmicCompanyReviews__ArgsType = {};
type ArgPropType = keyof PlasmicCompanyReviews__ArgsType;
export const PlasmicCompanyReviews__ArgProps = new Array<ArgPropType>();

export type PlasmicCompanyReviews__OverridesType = {
  root?: Flex__<"div">;
  mainNavigation?: Flex__<typeof MainNavigation>;
  content?: Flex__<"div">;
  header?: Flex__<"div">;
  pathBreadcrumb?: Flex__<typeof PathBreadcrumb>;
  basicInfo?: Flex__<"div">;
  companyLogo?: Flex__<typeof PlasmicImg__>;
  companyName?: Flex__<"div">;
  reviews?: Flex__<"div">;
  reviews2?: Flex__<"div">;
  averageRating?: Flex__<"div">;
  trustScore?: Flex__<"div">;
  websiteAddressCard?: Flex__<typeof WebsiteAddressCard>;
  writeAReview?: Flex__<typeof WriteAReview>;
  reviewsSummary?: Flex__<typeof ReviewsSummary>;
  reviewsList?: Flex__<"div">;
  reviewCard?: Flex__<typeof ReviewCard>;
  pagination?: Flex__<typeof AntdPagination>;
  companyActivity?: Flex__<typeof Card>;
  link?: Flex__<"a"> & Partial<LinkProps>;
  companyActivityTags?: Flex__<typeof CompanyActivityTags>;
  companyInfo?: Flex__<typeof Card>;
  trustpilotExperience?: Flex__<typeof Card>;
  footer?: Flex__<typeof Footer>;
  drawer?: Flex__<typeof AntdDrawer>;
  sectionRating?: Flex__<"div">;
  sectionTitle?: Flex__<"div">;
  options2?: Flex__<"div">;
  rating1?: Flex__<typeof Label>;
  rating2?: Flex__<typeof Label>;
  rating3?: Flex__<typeof Label>;
  rating4?: Flex__<typeof Label>;
  rating5?: Flex__<typeof Label>;
  sectionRecommended?: Flex__<"div">;
  sectionTitle2?: Flex__<"div">;
  options?: Flex__<"div">;
  checkboxVerified?: Flex__<"div">;
  verified?: Flex__<typeof AntdCheckbox>;
  captionVerified2?: Flex__<"div">;
  captionVerified?: Flex__<"div">;
  checkboxReplies?: Flex__<"div">;
  replies?: Flex__<typeof AntdCheckbox>;
  captionReplies2?: Flex__<"div">;
  captionReplies?: Flex__<"div">;
  sectionDatePosted?: Flex__<"div">;
  sectionTitle3?: Flex__<"div">;
  datePosted?: Flex__<typeof AntdRadioGroup>;
  sectionSearch?: Flex__<"div">;
  sectionTitle4?: Flex__<"div">;
  searchBar?: Flex__<typeof AntdInput>;
  sectionLanguages?: Flex__<"div">;
  sectionTitle5?: Flex__<"div">;
  language?: Flex__<typeof AntdRadioGroup>;
  reset?: Flex__<typeof AntdButton>;
  showFiltered?: Flex__<typeof AntdButton>;
  button?: Flex__<"button">;
  svg?: Flex__<"svg">;
};

export interface DefaultCompanyReviewsProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicCompanyReviews__RenderFunc(props: {
  variants: PlasmicCompanyReviews__VariantsArgs;
  args: PlasmicCompanyReviews__ArgsType;
  overrides: PlasmicCompanyReviews__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "pagination.currentPage",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 1,

        onMutate: generateOnMutateForSpec("currentPage", AntdPagination_Helpers)
      },
      {
        path: "pagination.pageSize",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 10,

        onMutate: generateOnMutateForSpec("pageSize", AntdPagination_Helpers)
      },
      {
        path: "pagination.startIndex",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("startIndex", AntdPagination_Helpers)
      },
      {
        path: "pagination.endIndex",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("endIndex", AntdPagination_Helpers)
      },
      {
        path: "reviewsSummary._5StarChecked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.ratingFilters["5-star"];
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "reviewsSummary._4StarChecked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.ratingFilters["4-star"];
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "reviewsSummary._3StarChecked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.ratingFilters["3-star"];
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "reviewsSummary._2StarChecked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.ratingFilters["2-star"];
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "reviewsSummary._1StarChecked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.ratingFilters["1-star"];
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "drawer.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "datePosted.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "searchBar.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "language.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "verified.checked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "replies.checked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "rating1.isSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.ratingFilters["1-star"];
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      },
      {
        path: "rating1.labelValue",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "rating2.isSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.ratingFilters["2-star"];
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      },
      {
        path: "rating2.labelValue",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "rating3.isSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.ratingFilters["3-star"];
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      },
      {
        path: "rating3.labelValue",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "rating4.isSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.ratingFilters["4-star"];
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      },
      {
        path: "rating4.labelValue",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "rating5.isSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.ratingFilters["5-star"];
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      },
      {
        path: "rating5.labelValue",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "ratingFilters",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({
          "1-star": false,
          "2-star": false,
          "3-star": false,
          "4-star": false,
          "5-star": false
        })
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    fetchReviews: usePlasmicDataOp(() => {
      return {
        sourceId: "czoZTBwvV8zZJLNVxj78Sv",
        opId: "7a26a7bb-d504-4cf6-a845-6dd920b8e9ef",
        userArgs: {
          query: [
            $ctx.params.company_id,
            Object.keys($state.reviewsSummary).map((key, index) => {
              if ($state.reviewsSummary[key] == true) return index + 1;
            }),
            Object.keys($state.reviewsSummary).filter(
              item => $state.reviewsSummary[item] === true
            ).length === 0,
            $state.pagination.pageSize,
            ($state.pagination.currentPage - 1) * $state.pagination.pageSize
          ]
        },
        cacheKey: `plasmic.$.7a26a7bb-d504-4cf6-a845-6dd920b8e9ef.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    fetchCompany: usePlasmicDataOp(() => {
      return {
        sourceId: "czoZTBwvV8zZJLNVxj78Sv",
        opId: "01dbb939-6ba7-4ada-b18d-fed02d430db0",
        userArgs: {
          keys: [$ctx.params.company_id]
        },
        cacheKey: `plasmic.$.01dbb939-6ba7-4ada-b18d-fed02d430db0.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    fetchReviewsSummary: usePlasmicDataOp(() => {
      return {
        sourceId: "czoZTBwvV8zZJLNVxj78Sv",
        opId: "8d47c0be-225c-401b-bd4a-4a33450bf3a4",
        userArgs: {
          keys: [$ctx.params.company_id]
        },
        cacheKey: `plasmic.$.8d47c0be-225c-401b-bd4a-4a33450bf3a4.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicCompanyReviews.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicCompanyReviews.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicCompanyReviews.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <MainNavigation
            data-plasmic-name={"mainNavigation"}
            data-plasmic-override={overrides.mainNavigation}
            className={classNames("__wab_instance", sty.mainNavigation)}
          />

          <div
            data-plasmic-name={"content"}
            data-plasmic-override={overrides.content}
            className={classNames(projectcss.all, sty.content)}
          >
            <div
              data-plasmic-name={"header"}
              data-plasmic-override={overrides.header}
              className={classNames(projectcss.all, sty.header)}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__umnrs)}
              >
                <PathBreadcrumb
                  data-plasmic-name={"pathBreadcrumb"}
                  data-plasmic-override={overrides.pathBreadcrumb}
                  className={classNames("__wab_instance", sty.pathBreadcrumb)}
                />

                <Stack__
                  as={"div"}
                  data-plasmic-name={"basicInfo"}
                  data-plasmic-override={overrides.basicInfo}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.basicInfo)}
                >
                  <div
                    className={classNames(projectcss.all, sty.columns__mweP)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.column__aoNkV)}
                    >
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__d9OIg
                        )}
                      >
                        <PlasmicImg__
                          data-plasmic-name={"companyLogo"}
                          data-plasmic-override={overrides.companyLogo}
                          alt={""}
                          className={classNames(sty.companyLogo)}
                          displayHeight={"auto"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"auto"}
                          loading={"lazy"}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__g2HBy
                          )}
                        >
                          <div
                            data-plasmic-name={"companyName"}
                            data-plasmic-override={overrides.companyName}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.companyName
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $queries.fetchCompany.data[0].name;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "Company name";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__bzW85
                            )}
                          >
                            <div
                              data-plasmic-name={"reviews"}
                              data-plasmic-override={overrides.reviews}
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.reviews
                              )}
                            >
                              {"reviews"}
                            </div>
                            <div
                              data-plasmic-name={"reviews2"}
                              data-plasmic-override={overrides.reviews2}
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.reviews2
                              )}
                            >
                              {"\u2022"}
                            </div>
                            <div
                              data-plasmic-name={"averageRating"}
                              data-plasmic-override={overrides.averageRating}
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.averageRating
                              )}
                            >
                              {"average rating"}
                            </div>
                          </Stack__>
                          <div
                            data-plasmic-name={"trustScore"}
                            data-plasmic-override={overrides.trustScore}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.trustScore
                            )}
                          >
                            {"trustScore"}
                          </div>
                        </div>
                      </Stack__>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.column__qmDeR)}
                    >
                      {(() => {
                        try {
                          return $queries.fetchCompany.data[0].website_url
                            ? true
                            : false;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <WebsiteAddressCard
                          data-plasmic-name={"websiteAddressCard"}
                          data-plasmic-override={overrides.websiteAddressCard}
                          className={classNames(
                            "__wab_instance",
                            sty.websiteAddressCard
                          )}
                          companyWebsite={(() => {
                            try {
                              return $queries.fetchCompany.data[0].website_url;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                        />
                      ) : null}
                    </div>
                  </div>
                </Stack__>
              </Stack__>
            </div>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.columns__eZj0D)}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.column__g5NqW)}
              >
                {(() => {
                  try {
                    return (currentUser?.roleIds ?? []).includes(
                      "4d9b94b7-5067-41d5-bb18-b0b97eba2313"
                    );
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return false;
                    }
                    throw e;
                  }
                })() ? (
                  <WriteAReview
                    data-plasmic-name={"writeAReview"}
                    data-plasmic-override={overrides.writeAReview}
                    className={classNames("__wab_instance", sty.writeAReview)}
                    companyId={(() => {
                      try {
                        return $queries.fetchCompany.data[0].company_id;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                  />
                ) : null}
                <ReviewsSummary
                  data-plasmic-name={"reviewsSummary"}
                  data-plasmic-override={overrides.reviewsSummary}
                  _1StarChecked={generateStateValueProp($state, [
                    "reviewsSummary",
                    "_1StarChecked"
                  ])}
                  _2StarChecked={generateStateValueProp($state, [
                    "reviewsSummary",
                    "_2StarChecked"
                  ])}
                  _3StarChecked={generateStateValueProp($state, [
                    "reviewsSummary",
                    "_3StarChecked"
                  ])}
                  _4StarChecked={generateStateValueProp($state, [
                    "reviewsSummary",
                    "_4StarChecked"
                  ])}
                  _5StarChecked={generateStateValueProp($state, [
                    "reviewsSummary",
                    "_5StarChecked"
                  ])}
                  className={classNames("__wab_instance", sty.reviewsSummary)}
                  filterOnClick={async () => {
                    const $steps = {};

                    $steps["updateDrawerOpen"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["drawer", "open"]
                            },
                            operation: 0,
                            value: true
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateDrawerOpen"] != null &&
                      typeof $steps["updateDrawerOpen"] === "object" &&
                      typeof $steps["updateDrawerOpen"].then === "function"
                    ) {
                      $steps["updateDrawerOpen"] = await $steps[
                        "updateDrawerOpen"
                      ];
                    }
                  }}
                  on1StarCheckedChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "reviewsSummary",
                      "_1StarChecked"
                    ]).apply(null, eventArgs);
                    (async val => {
                      const $steps = {};

                      $steps["updateRatingFilters1Star"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["ratingFilters", "1-star"]
                              },
                              operation: 4
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              const oldValue = $stateGet(objRoot, variablePath);
                              $stateSet(objRoot, variablePath, !oldValue);
                              return !oldValue;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateRatingFilters1Star"] != null &&
                        typeof $steps["updateRatingFilters1Star"] ===
                          "object" &&
                        typeof $steps["updateRatingFilters1Star"].then ===
                          "function"
                      ) {
                        $steps["updateRatingFilters1Star"] = await $steps[
                          "updateRatingFilters1Star"
                        ];
                      }
                    }).apply(null, eventArgs);
                  }}
                  on2StarCheckedChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "reviewsSummary",
                      "_2StarChecked"
                    ]).apply(null, eventArgs);
                    (async val => {
                      const $steps = {};

                      $steps["updateRatingFilters2Star"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["ratingFilters", "2-star"]
                              },
                              operation: 4
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              const oldValue = $stateGet(objRoot, variablePath);
                              $stateSet(objRoot, variablePath, !oldValue);
                              return !oldValue;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateRatingFilters2Star"] != null &&
                        typeof $steps["updateRatingFilters2Star"] ===
                          "object" &&
                        typeof $steps["updateRatingFilters2Star"].then ===
                          "function"
                      ) {
                        $steps["updateRatingFilters2Star"] = await $steps[
                          "updateRatingFilters2Star"
                        ];
                      }
                    }).apply(null, eventArgs);
                  }}
                  on3StarCheckedChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "reviewsSummary",
                      "_3StarChecked"
                    ]).apply(null, eventArgs);
                    (async val => {
                      const $steps = {};

                      $steps["updateRatingFilters3Star"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["ratingFilters", "3-star"]
                              },
                              operation: 4
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              const oldValue = $stateGet(objRoot, variablePath);
                              $stateSet(objRoot, variablePath, !oldValue);
                              return !oldValue;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateRatingFilters3Star"] != null &&
                        typeof $steps["updateRatingFilters3Star"] ===
                          "object" &&
                        typeof $steps["updateRatingFilters3Star"].then ===
                          "function"
                      ) {
                        $steps["updateRatingFilters3Star"] = await $steps[
                          "updateRatingFilters3Star"
                        ];
                      }
                    }).apply(null, eventArgs);
                  }}
                  on4StarCheckedChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "reviewsSummary",
                      "_4StarChecked"
                    ]).apply(null, eventArgs);
                    (async val => {
                      const $steps = {};

                      $steps["updateRatingFilters4Star"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["ratingFilters", "4-star"]
                              },
                              operation: 4
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              const oldValue = $stateGet(objRoot, variablePath);
                              $stateSet(objRoot, variablePath, !oldValue);
                              return !oldValue;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateRatingFilters4Star"] != null &&
                        typeof $steps["updateRatingFilters4Star"] ===
                          "object" &&
                        typeof $steps["updateRatingFilters4Star"].then ===
                          "function"
                      ) {
                        $steps["updateRatingFilters4Star"] = await $steps[
                          "updateRatingFilters4Star"
                        ];
                      }
                    }).apply(null, eventArgs);
                  }}
                  on5StarCheckedChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "reviewsSummary",
                      "_5StarChecked"
                    ]).apply(null, eventArgs);
                    (async val => {
                      const $steps = {};

                      $steps["updateRatingFilters5Star"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["ratingFilters", "5-star"]
                              },
                              operation: 4
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              const oldValue = $stateGet(objRoot, variablePath);
                              $stateSet(objRoot, variablePath, !oldValue);
                              return !oldValue;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateRatingFilters5Star"] != null &&
                        typeof $steps["updateRatingFilters5Star"] ===
                          "object" &&
                        typeof $steps["updateRatingFilters5Star"].then ===
                          "function"
                      ) {
                        $steps["updateRatingFilters5Star"] = await $steps[
                          "updateRatingFilters5Star"
                        ];
                      }
                    }).apply(null, eventArgs);
                  }}
                  overallRating={(() => {
                    try {
                      return $queries.fetchCompany.data[0].rating;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  reviews1Star={(() => {
                    try {
                      return $queries.fetchReviewsSummary.data[0].reviews_1star;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return 10;
                      }
                      throw e;
                    }
                  })()}
                  reviews2Star={(() => {
                    try {
                      return $queries.fetchReviewsSummary.data[0].reviews_2star;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return 20;
                      }
                      throw e;
                    }
                  })()}
                  reviews3Star={(() => {
                    try {
                      return $queries.fetchReviewsSummary.data[0].reviews_3star;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return 30;
                      }
                      throw e;
                    }
                  })()}
                  reviews4Star={(() => {
                    try {
                      return $queries.fetchReviewsSummary.data[0].reviews_4star;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return 20;
                      }
                      throw e;
                    }
                  })()}
                  reviews5Star={(() => {
                    try {
                      return $queries.fetchReviewsSummary.data[0].reviews_5star;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return 10;
                      }
                      throw e;
                    }
                  })()}
                  reviewsTotal={(() => {
                    try {
                      return $queries.fetchReviewsSummary.data[0].reviews_total;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return 100;
                      }
                      throw e;
                    }
                  })()}
                />

                <Stack__
                  as={"div"}
                  data-plasmic-name={"reviewsList"}
                  data-plasmic-override={overrides.reviewsList}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.reviewsList)}
                >
                  {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                    (() => {
                      try {
                        return $queries.fetchReviews.data;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
                  ).map((__plasmic_item_0, __plasmic_idx_0) => {
                    const currentItem = __plasmic_item_0;
                    const currentIndex = __plasmic_idx_0;
                    return (
                      <ReviewCard
                        data-plasmic-name={"reviewCard"}
                        data-plasmic-override={overrides.reviewCard}
                        className={classNames("__wab_instance", sty.reviewCard)}
                        dateOfExperience={(() => {
                          try {
                            return currentItem.created_at;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                        key={currentIndex}
                        reviewContent={(() => {
                          try {
                            return currentItem.review;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                        reviewTitle={(() => {
                          try {
                            return currentItem.title;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                        username={(() => {
                          try {
                            return currentItem.user;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                      />
                    );
                  })}
                  {(() => {
                    const child$Props = {
                      className: classNames("__wab_instance", sty.pagination),
                      current: generateStateValueProp($state, [
                        "pagination",
                        "currentPage"
                      ]),
                      defaultCurrent: 1,
                      defaultPageSize: 10,
                      hideOnSinglePage: false,
                      onChange: async (...eventArgs: any) => {
                        generateStateOnChangePropForCodeComponents(
                          $state,
                          "currentPage",
                          ["pagination", "currentPage"],
                          AntdPagination_Helpers
                        ).apply(null, eventArgs);
                        generateStateOnChangePropForCodeComponents(
                          $state,
                          "startIndex",
                          ["pagination", "startIndex"],
                          AntdPagination_Helpers
                        ).apply(null, eventArgs);
                        generateStateOnChangePropForCodeComponents(
                          $state,
                          "endIndex",
                          ["pagination", "endIndex"],
                          AntdPagination_Helpers
                        ).apply(null, eventArgs);
                      },
                      onShowSizeChange:
                        generateStateOnChangePropForCodeComponents(
                          $state,
                          "pageSize",
                          ["pagination", "pageSize"],
                          AntdPagination_Helpers
                        ),
                      pageSize: generateStateValueProp($state, [
                        "pagination",
                        "pageSize"
                      ]),
                      pageSizeOptions: [
                        { pageSize: 10 },
                        { pageSize: 20 },
                        { pageSize: 50 },
                        { pageSize: 100 }
                      ],
                      showLessItems: false,
                      showQuickJumper: false,
                      showSizeChanger: false,
                      showTotal: (total, range) => {
                        return true;
                      },

                      simple: false,
                      size: "default",
                      total: (() => {
                        try {
                          return $queries.fetchReviewsSummary.data[0]
                            .reviews_total;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()
                    };
                    initializeCodeComponentStates(
                      $state,
                      [
                        {
                          name: "currentPage",
                          plasmicStateName: "pagination.currentPage"
                        },
                        {
                          name: "pageSize",
                          plasmicStateName: "pagination.pageSize"
                        },
                        {
                          name: "startIndex",
                          plasmicStateName: "pagination.startIndex"
                        },
                        {
                          name: "endIndex",
                          plasmicStateName: "pagination.endIndex"
                        }
                      ],
                      [],
                      AntdPagination_Helpers ?? {},
                      child$Props
                    );

                    return (
                      <AntdPagination
                        data-plasmic-name={"pagination"}
                        data-plasmic-override={overrides.pagination}
                        {...child$Props}
                      />
                    );
                  })()}
                </Stack__>
              </Stack__>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.column__kctQ5)}
              >
                <Card
                  data-plasmic-name={"companyActivity"}
                  data-plasmic-override={overrides.companyActivity}
                  className={classNames("__wab_instance", sty.companyActivity)}
                  title={
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__glx7E)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__epiV7
                        )}
                      >
                        {"Company activity"}
                      </div>
                      <PlasmicLink__
                        data-plasmic-name={"link"}
                        data-plasmic-override={overrides.link}
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          projectcss.__wab_text,
                          sty.link
                        )}
                        component={Link}
                        href={"https://www.plasmic.app/"}
                        platform={"nextjs"}
                      >
                        {"See all"}
                      </PlasmicLink__>
                    </Stack__>
                  }
                >
                  <CompanyActivityTags
                    data-plasmic-name={"companyActivityTags"}
                    data-plasmic-override={overrides.companyActivityTags}
                    className={classNames(
                      "__wab_instance",
                      sty.companyActivityTags
                    )}
                  />
                </Card>
                <Card
                  data-plasmic-name={"companyInfo"}
                  data-plasmic-override={overrides.companyInfo}
                  className={classNames("__wab_instance", sty.companyInfo)}
                  title={
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___4SENy
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__tO6UZ
                        )}
                      >
                        {"About"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__xlZaf
                        )}
                      >
                        {"Information written by the company"}
                      </div>
                    </Stack__>
                  }
                />

                <Card
                  data-plasmic-name={"trustpilotExperience"}
                  data-plasmic-override={overrides.trustpilotExperience}
                  className={classNames(
                    "__wab_instance",
                    sty.trustpilotExperience
                  )}
                  title={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__bw4Vy
                      )}
                    >
                      {"The Trustpilot Experience"}
                    </div>
                  }
                />
              </Stack__>
            </Stack__>
          </div>
          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />

          <AntdDrawer
            data-plasmic-name={"drawer"}
            data-plasmic-override={overrides.drawer}
            className={classNames("__wab_instance", sty.drawer)}
            closeIcon={
              <button
                data-plasmic-name={"button"}
                data-plasmic-override={overrides.button}
                className={classNames(
                  projectcss.all,
                  projectcss.button,
                  sty.button
                )}
              >
                <XIcon
                  data-plasmic-name={"svg"}
                  data-plasmic-override={overrides.svg}
                  className={classNames(projectcss.all, sty.svg)}
                  role={"img"}
                />
              </button>
            }
            defaultStylesClassName={classNames(
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              projectcss.plasmic_tokens,
              plasmic_antd_5_hostless_css.plasmic_tokens,
              plasmic_plasmic_rich_components_css.plasmic_tokens
            )}
            drawerScopeClassName={sty["drawer__drawer"]}
            footer={
              <div className={classNames(projectcss.all, sty.freeBox__omrr0)}>
                <AntdButton
                  data-plasmic-name={"reset"}
                  data-plasmic-override={overrides.reset}
                  className={classNames("__wab_instance", sty.reset)}
                  type={"ghost"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__mBaaX
                    )}
                  >
                    {"Reset"}
                  </div>
                </AntdButton>
                <AntdButton
                  data-plasmic-name={"showFiltered"}
                  data-plasmic-override={overrides.showFiltered}
                  className={classNames("__wab_instance", sty.showFiltered)}
                  onClick={async () => {
                    const $steps = {};

                    $steps["updateDrawerOpen"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["drawer", "open"]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateDrawerOpen"] != null &&
                      typeof $steps["updateDrawerOpen"] === "object" &&
                      typeof $steps["updateDrawerOpen"].then === "function"
                    ) {
                      $steps["updateDrawerOpen"] = await $steps[
                        "updateDrawerOpen"
                      ];
                    }
                  }}
                  submitsForm={true}
                  type={"primary"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__mwEeh
                    )}
                  >
                    {"Show"}
                  </div>
                </AntdButton>
              </div>
            }
            forceRender={false}
            onOpenChange={generateStateOnChangeProp($state, ["drawer", "open"])}
            open={generateStateValueProp($state, ["drawer", "open"])}
            title={"Filter by"}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__yyQbp)}
              id={"drawer-filters"}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"sectionRating"}
                data-plasmic-override={overrides.sectionRating}
                hasGap={true}
                className={classNames(projectcss.all, sty.sectionRating)}
              >
                <div
                  data-plasmic-name={"sectionTitle"}
                  data-plasmic-override={overrides.sectionTitle}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.sectionTitle
                  )}
                >
                  {"Rating"}
                </div>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"options2"}
                  data-plasmic-override={overrides.options2}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.options2)}
                >
                  <Label
                    data-plasmic-name={"rating1"}
                    data-plasmic-override={overrides.rating1}
                    className={classNames("__wab_instance", sty.rating1)}
                    isSelected={generateStateValueProp($state, [
                      "rating1",
                      "isSelected"
                    ])}
                    label={"1"}
                    onIsSelectedChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "rating1",
                        "isSelected"
                      ]).apply(null, eventArgs);
                      (async val => {
                        const $steps = {};

                        $steps["updateRatingFilters1Star"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["ratingFilters", "1-star"]
                                },
                                operation: 4
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                const oldValue = $stateGet(
                                  objRoot,
                                  variablePath
                                );
                                $stateSet(objRoot, variablePath, !oldValue);
                                return !oldValue;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateRatingFilters1Star"] != null &&
                          typeof $steps["updateRatingFilters1Star"] ===
                            "object" &&
                          typeof $steps["updateRatingFilters1Star"].then ===
                            "function"
                        ) {
                          $steps["updateRatingFilters1Star"] = await $steps[
                            "updateRatingFilters1Star"
                          ];
                        }
                      }).apply(null, eventArgs);
                    }}
                    onLabelValueChange={generateStateOnChangeProp($state, [
                      "rating1",
                      "labelValue"
                    ])}
                    selected={(() => {
                      try {
                        return $state.ratingFilters["1-star"];
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()}
                  />

                  <Label
                    data-plasmic-name={"rating2"}
                    data-plasmic-override={overrides.rating2}
                    className={classNames("__wab_instance", sty.rating2)}
                    isSelected={generateStateValueProp($state, [
                      "rating2",
                      "isSelected"
                    ])}
                    label={"2"}
                    onIsSelectedChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "rating2",
                        "isSelected"
                      ]).apply(null, eventArgs);
                      (async val => {
                        const $steps = {};

                        $steps["updateRatingFilters2Star"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["ratingFilters", "2-star"]
                                },
                                operation: 4
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                const oldValue = $stateGet(
                                  objRoot,
                                  variablePath
                                );
                                $stateSet(objRoot, variablePath, !oldValue);
                                return !oldValue;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateRatingFilters2Star"] != null &&
                          typeof $steps["updateRatingFilters2Star"] ===
                            "object" &&
                          typeof $steps["updateRatingFilters2Star"].then ===
                            "function"
                        ) {
                          $steps["updateRatingFilters2Star"] = await $steps[
                            "updateRatingFilters2Star"
                          ];
                        }
                      }).apply(null, eventArgs);
                    }}
                    onLabelValueChange={generateStateOnChangeProp($state, [
                      "rating2",
                      "labelValue"
                    ])}
                    selected={(() => {
                      try {
                        return $state.ratingFilters["2-star"];
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()}
                  />

                  <Label
                    data-plasmic-name={"rating3"}
                    data-plasmic-override={overrides.rating3}
                    className={classNames("__wab_instance", sty.rating3)}
                    isSelected={generateStateValueProp($state, [
                      "rating3",
                      "isSelected"
                    ])}
                    label={"3"}
                    onIsSelectedChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "rating3",
                        "isSelected"
                      ]).apply(null, eventArgs);
                      (async val => {
                        const $steps = {};

                        $steps["updateRatingFilters3Star"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["ratingFilters", "3-star"]
                                },
                                operation: 4
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                const oldValue = $stateGet(
                                  objRoot,
                                  variablePath
                                );
                                $stateSet(objRoot, variablePath, !oldValue);
                                return !oldValue;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateRatingFilters3Star"] != null &&
                          typeof $steps["updateRatingFilters3Star"] ===
                            "object" &&
                          typeof $steps["updateRatingFilters3Star"].then ===
                            "function"
                        ) {
                          $steps["updateRatingFilters3Star"] = await $steps[
                            "updateRatingFilters3Star"
                          ];
                        }
                      }).apply(null, eventArgs);
                    }}
                    onLabelValueChange={generateStateOnChangeProp($state, [
                      "rating3",
                      "labelValue"
                    ])}
                    selected={(() => {
                      try {
                        return $state.ratingFilters["3-star"];
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()}
                  />

                  <Label
                    data-plasmic-name={"rating4"}
                    data-plasmic-override={overrides.rating4}
                    className={classNames("__wab_instance", sty.rating4)}
                    isSelected={generateStateValueProp($state, [
                      "rating4",
                      "isSelected"
                    ])}
                    label={"4"}
                    onIsSelectedChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "rating4",
                        "isSelected"
                      ]).apply(null, eventArgs);
                      (async val => {
                        const $steps = {};

                        $steps["updateRatingFilters4Star"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["ratingFilters", "4-star"]
                                },
                                operation: 4
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                const oldValue = $stateGet(
                                  objRoot,
                                  variablePath
                                );
                                $stateSet(objRoot, variablePath, !oldValue);
                                return !oldValue;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateRatingFilters4Star"] != null &&
                          typeof $steps["updateRatingFilters4Star"] ===
                            "object" &&
                          typeof $steps["updateRatingFilters4Star"].then ===
                            "function"
                        ) {
                          $steps["updateRatingFilters4Star"] = await $steps[
                            "updateRatingFilters4Star"
                          ];
                        }
                      }).apply(null, eventArgs);
                    }}
                    onLabelValueChange={generateStateOnChangeProp($state, [
                      "rating4",
                      "labelValue"
                    ])}
                    selected={(() => {
                      try {
                        return $state.ratingFilters["4-star"];
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()}
                  />

                  <Label
                    data-plasmic-name={"rating5"}
                    data-plasmic-override={overrides.rating5}
                    className={classNames("__wab_instance", sty.rating5)}
                    isSelected={generateStateValueProp($state, [
                      "rating5",
                      "isSelected"
                    ])}
                    label={"5"}
                    onIsSelectedChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "rating5",
                        "isSelected"
                      ]).apply(null, eventArgs);
                      (async val => {
                        const $steps = {};

                        $steps["updateRatingFilters5Star"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["ratingFilters", "5-star"]
                                },
                                operation: 4
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                const oldValue = $stateGet(
                                  objRoot,
                                  variablePath
                                );
                                $stateSet(objRoot, variablePath, !oldValue);
                                return !oldValue;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateRatingFilters5Star"] != null &&
                          typeof $steps["updateRatingFilters5Star"] ===
                            "object" &&
                          typeof $steps["updateRatingFilters5Star"].then ===
                            "function"
                        ) {
                          $steps["updateRatingFilters5Star"] = await $steps[
                            "updateRatingFilters5Star"
                          ];
                        }
                      }).apply(null, eventArgs);
                    }}
                    onLabelValueChange={generateStateOnChangeProp($state, [
                      "rating5",
                      "labelValue"
                    ])}
                    selected={(() => {
                      try {
                        return $state.ratingFilters["5-star"];
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()}
                  />
                </Stack__>
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"sectionRecommended"}
                data-plasmic-override={overrides.sectionRecommended}
                hasGap={true}
                className={classNames(projectcss.all, sty.sectionRecommended)}
              >
                <div
                  data-plasmic-name={"sectionTitle2"}
                  data-plasmic-override={overrides.sectionTitle2}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.sectionTitle2
                  )}
                >
                  {"Recommended"}
                </div>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"options"}
                  data-plasmic-override={overrides.options}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.options)}
                >
                  <div
                    data-plasmic-name={"checkboxVerified"}
                    data-plasmic-override={overrides.checkboxVerified}
                    className={classNames(projectcss.all, sty.checkboxVerified)}
                  >
                    <AntdCheckbox
                      data-plasmic-name={"verified"}
                      data-plasmic-override={overrides.verified}
                      checked={generateStateValueProp($state, [
                        "verified",
                        "checked"
                      ])}
                      className={classNames("__wab_instance", sty.verified)}
                      onChange={generateStateOnChangeProp($state, [
                        "verified",
                        "checked"
                      ])}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__l5HeI
                        )}
                      >
                        {"Verified"}
                      </div>
                    </AntdCheckbox>
                    <div
                      data-plasmic-name={"captionVerified2"}
                      data-plasmic-override={overrides.captionVerified2}
                      className={classNames(
                        projectcss.all,
                        sty.captionVerified2
                      )}
                    >
                      <div
                        data-plasmic-name={"captionVerified"}
                        data-plasmic-override={overrides.captionVerified}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.captionVerified
                        )}
                      >
                        {
                          "Reviews are labeled verified when a company automatically invites people to write a review using Trustpilot\u2019s supported invitation methods."
                        }
                      </div>
                    </div>
                  </div>
                  <div
                    data-plasmic-name={"checkboxReplies"}
                    data-plasmic-override={overrides.checkboxReplies}
                    className={classNames(projectcss.all, sty.checkboxReplies)}
                  >
                    <AntdCheckbox
                      data-plasmic-name={"replies"}
                      data-plasmic-override={overrides.replies}
                      checked={generateStateValueProp($state, [
                        "replies",
                        "checked"
                      ])}
                      className={classNames("__wab_instance", sty.replies)}
                      onChange={generateStateOnChangeProp($state, [
                        "replies",
                        "checked"
                      ])}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__g1JDk
                        )}
                      >
                        {"Replies"}
                      </div>
                    </AntdCheckbox>
                    <div
                      data-plasmic-name={"captionReplies2"}
                      data-plasmic-override={overrides.captionReplies2}
                      className={classNames(
                        projectcss.all,
                        sty.captionReplies2
                      )}
                    >
                      <div
                        data-plasmic-name={"captionReplies"}
                        data-plasmic-override={overrides.captionReplies}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.captionReplies
                        )}
                      >
                        {"Enter some text"}
                      </div>
                    </div>
                  </div>
                </Stack__>
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"sectionDatePosted"}
                data-plasmic-override={overrides.sectionDatePosted}
                hasGap={true}
                className={classNames(projectcss.all, sty.sectionDatePosted)}
              >
                <div
                  data-plasmic-name={"sectionTitle3"}
                  data-plasmic-override={overrides.sectionTitle3}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.sectionTitle3
                  )}
                >
                  {"Date posted"}
                </div>
                <AntdRadioGroup
                  data-plasmic-name={"datePosted"}
                  data-plasmic-override={overrides.datePosted}
                  className={classNames("__wab_instance", sty.datePosted)}
                  onChange={generateStateOnChangeProp($state, [
                    "datePosted",
                    "value"
                  ])}
                  options={(() => {
                    const __composite = [
                      { value: null, label: null },
                      { value: null, label: null },
                      { value: null, label: null },
                      { value: null, label: null },
                      { value: null, label: null }
                    ];
                    __composite["0"]["value"] = "true";
                    __composite["0"]["label"] = "All reviews";
                    __composite["1"]["value"] = "30";
                    __composite["1"]["label"] = "Last 30 days";
                    __composite["2"]["value"] = "90";
                    __composite["2"]["label"] = "Last 3 months";
                    __composite["3"]["value"] = "120";
                    __composite["3"]["label"] = "Last 6 months";
                    __composite["4"]["value"] = "365";
                    __composite["4"]["label"] = "Last 12 months";
                    return __composite;
                  })()}
                  value={generateStateValueProp($state, [
                    "datePosted",
                    "value"
                  ])}
                >
                  <AntdRadio
                    className={classNames("__wab_instance", sty.radio__s5Xgt)}
                    value={"op1"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__cQrSb
                      )}
                    >
                      {"Option 1"}
                    </div>
                  </AntdRadio>
                  <AntdRadio
                    className={classNames("__wab_instance", sty.radio__rcamx)}
                    value={"op2"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__qBcW8
                      )}
                    >
                      {"Option 2"}
                    </div>
                  </AntdRadio>
                </AntdRadioGroup>
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"sectionSearch"}
                data-plasmic-override={overrides.sectionSearch}
                hasGap={true}
                className={classNames(projectcss.all, sty.sectionSearch)}
              >
                <div
                  data-plasmic-name={"sectionTitle4"}
                  data-plasmic-override={overrides.sectionTitle4}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.sectionTitle4
                  )}
                >
                  {"Search reviews"}
                </div>
                {(() => {
                  const child$Props = {
                    allowClear: true,
                    className: classNames("__wab_instance", sty.searchBar),
                    onChange: generateStateOnChangePropForCodeComponents(
                      $state,
                      "value",
                      ["searchBar", "value"],
                      AntdInput_Helpers
                    ),
                    placeholder: "Search by keyword",
                    type: "text",
                    value: generateStateValueProp($state, [
                      "searchBar",
                      "value"
                    ])
                  };
                  initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "value",
                        plasmicStateName: "searchBar.value"
                      }
                    ],
                    [],
                    AntdInput_Helpers ?? {},
                    child$Props
                  );

                  return (
                    <AntdInput
                      data-plasmic-name={"searchBar"}
                      data-plasmic-override={overrides.searchBar}
                      {...child$Props}
                    />
                  );
                })()}
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"sectionLanguages"}
                data-plasmic-override={overrides.sectionLanguages}
                hasGap={true}
                className={classNames(projectcss.all, sty.sectionLanguages)}
              >
                <div
                  data-plasmic-name={"sectionTitle5"}
                  data-plasmic-override={overrides.sectionTitle5}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.sectionTitle5
                  )}
                >
                  {"Language"}
                </div>
                <AntdRadioGroup
                  data-plasmic-name={"language"}
                  data-plasmic-override={overrides.language}
                  className={classNames("__wab_instance", sty.language)}
                  onChange={generateStateOnChangeProp($state, [
                    "language",
                    "value"
                  ])}
                  options={(() => {
                    const __composite = [{ value: null, label: null }];
                    __composite["0"]["value"] = "true";
                    __composite["0"]["label"] = "All languages";
                    return __composite;
                  })()}
                  value={generateStateValueProp($state, ["language", "value"])}
                >
                  <AntdRadio
                    className={classNames("__wab_instance", sty.radio__iGg5R)}
                    value={"op1"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__aJlN
                      )}
                    >
                      {"Option 1"}
                    </div>
                  </AntdRadio>
                  <AntdRadio
                    className={classNames("__wab_instance", sty.radio__ahp6E)}
                    value={"op2"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__iRuJy
                      )}
                    >
                      {"Option 2"}
                    </div>
                  </AntdRadio>
                </AntdRadioGroup>
              </Stack__>
            </Stack__>
          </AntdDrawer>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "mainNavigation",
    "content",
    "header",
    "pathBreadcrumb",
    "basicInfo",
    "companyLogo",
    "companyName",
    "reviews",
    "reviews2",
    "averageRating",
    "trustScore",
    "websiteAddressCard",
    "writeAReview",
    "reviewsSummary",
    "reviewsList",
    "reviewCard",
    "pagination",
    "companyActivity",
    "link",
    "companyActivityTags",
    "companyInfo",
    "trustpilotExperience",
    "footer",
    "drawer",
    "sectionRating",
    "sectionTitle",
    "options2",
    "rating1",
    "rating2",
    "rating3",
    "rating4",
    "rating5",
    "sectionRecommended",
    "sectionTitle2",
    "options",
    "checkboxVerified",
    "verified",
    "captionVerified2",
    "captionVerified",
    "checkboxReplies",
    "replies",
    "captionReplies2",
    "captionReplies",
    "sectionDatePosted",
    "sectionTitle3",
    "datePosted",
    "sectionSearch",
    "sectionTitle4",
    "searchBar",
    "sectionLanguages",
    "sectionTitle5",
    "language",
    "reset",
    "showFiltered",
    "button",
    "svg"
  ],
  mainNavigation: ["mainNavigation"],
  content: [
    "content",
    "header",
    "pathBreadcrumb",
    "basicInfo",
    "companyLogo",
    "companyName",
    "reviews",
    "reviews2",
    "averageRating",
    "trustScore",
    "websiteAddressCard",
    "writeAReview",
    "reviewsSummary",
    "reviewsList",
    "reviewCard",
    "pagination",
    "companyActivity",
    "link",
    "companyActivityTags",
    "companyInfo",
    "trustpilotExperience"
  ],
  header: [
    "header",
    "pathBreadcrumb",
    "basicInfo",
    "companyLogo",
    "companyName",
    "reviews",
    "reviews2",
    "averageRating",
    "trustScore",
    "websiteAddressCard"
  ],
  pathBreadcrumb: ["pathBreadcrumb"],
  basicInfo: [
    "basicInfo",
    "companyLogo",
    "companyName",
    "reviews",
    "reviews2",
    "averageRating",
    "trustScore",
    "websiteAddressCard"
  ],
  companyLogo: ["companyLogo"],
  companyName: ["companyName"],
  reviews: ["reviews"],
  reviews2: ["reviews2"],
  averageRating: ["averageRating"],
  trustScore: ["trustScore"],
  websiteAddressCard: ["websiteAddressCard"],
  writeAReview: ["writeAReview"],
  reviewsSummary: ["reviewsSummary"],
  reviewsList: ["reviewsList", "reviewCard", "pagination"],
  reviewCard: ["reviewCard"],
  pagination: ["pagination"],
  companyActivity: ["companyActivity", "link", "companyActivityTags"],
  link: ["link"],
  companyActivityTags: ["companyActivityTags"],
  companyInfo: ["companyInfo"],
  trustpilotExperience: ["trustpilotExperience"],
  footer: ["footer"],
  drawer: [
    "drawer",
    "sectionRating",
    "sectionTitle",
    "options2",
    "rating1",
    "rating2",
    "rating3",
    "rating4",
    "rating5",
    "sectionRecommended",
    "sectionTitle2",
    "options",
    "checkboxVerified",
    "verified",
    "captionVerified2",
    "captionVerified",
    "checkboxReplies",
    "replies",
    "captionReplies2",
    "captionReplies",
    "sectionDatePosted",
    "sectionTitle3",
    "datePosted",
    "sectionSearch",
    "sectionTitle4",
    "searchBar",
    "sectionLanguages",
    "sectionTitle5",
    "language",
    "reset",
    "showFiltered",
    "button",
    "svg"
  ],
  sectionRating: [
    "sectionRating",
    "sectionTitle",
    "options2",
    "rating1",
    "rating2",
    "rating3",
    "rating4",
    "rating5"
  ],
  sectionTitle: ["sectionTitle"],
  options2: ["options2", "rating1", "rating2", "rating3", "rating4", "rating5"],
  rating1: ["rating1"],
  rating2: ["rating2"],
  rating3: ["rating3"],
  rating4: ["rating4"],
  rating5: ["rating5"],
  sectionRecommended: [
    "sectionRecommended",
    "sectionTitle2",
    "options",
    "checkboxVerified",
    "verified",
    "captionVerified2",
    "captionVerified",
    "checkboxReplies",
    "replies",
    "captionReplies2",
    "captionReplies"
  ],
  sectionTitle2: ["sectionTitle2"],
  options: [
    "options",
    "checkboxVerified",
    "verified",
    "captionVerified2",
    "captionVerified",
    "checkboxReplies",
    "replies",
    "captionReplies2",
    "captionReplies"
  ],
  checkboxVerified: [
    "checkboxVerified",
    "verified",
    "captionVerified2",
    "captionVerified"
  ],
  verified: ["verified"],
  captionVerified2: ["captionVerified2", "captionVerified"],
  captionVerified: ["captionVerified"],
  checkboxReplies: [
    "checkboxReplies",
    "replies",
    "captionReplies2",
    "captionReplies"
  ],
  replies: ["replies"],
  captionReplies2: ["captionReplies2", "captionReplies"],
  captionReplies: ["captionReplies"],
  sectionDatePosted: ["sectionDatePosted", "sectionTitle3", "datePosted"],
  sectionTitle3: ["sectionTitle3"],
  datePosted: ["datePosted"],
  sectionSearch: ["sectionSearch", "sectionTitle4", "searchBar"],
  sectionTitle4: ["sectionTitle4"],
  searchBar: ["searchBar"],
  sectionLanguages: ["sectionLanguages", "sectionTitle5", "language"],
  sectionTitle5: ["sectionTitle5"],
  language: ["language"],
  reset: ["reset"],
  showFiltered: ["showFiltered"],
  button: ["button", "svg"],
  svg: ["svg"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  mainNavigation: typeof MainNavigation;
  content: "div";
  header: "div";
  pathBreadcrumb: typeof PathBreadcrumb;
  basicInfo: "div";
  companyLogo: typeof PlasmicImg__;
  companyName: "div";
  reviews: "div";
  reviews2: "div";
  averageRating: "div";
  trustScore: "div";
  websiteAddressCard: typeof WebsiteAddressCard;
  writeAReview: typeof WriteAReview;
  reviewsSummary: typeof ReviewsSummary;
  reviewsList: "div";
  reviewCard: typeof ReviewCard;
  pagination: typeof AntdPagination;
  companyActivity: typeof Card;
  link: "a";
  companyActivityTags: typeof CompanyActivityTags;
  companyInfo: typeof Card;
  trustpilotExperience: typeof Card;
  footer: typeof Footer;
  drawer: typeof AntdDrawer;
  sectionRating: "div";
  sectionTitle: "div";
  options2: "div";
  rating1: typeof Label;
  rating2: typeof Label;
  rating3: typeof Label;
  rating4: typeof Label;
  rating5: typeof Label;
  sectionRecommended: "div";
  sectionTitle2: "div";
  options: "div";
  checkboxVerified: "div";
  verified: typeof AntdCheckbox;
  captionVerified2: "div";
  captionVerified: "div";
  checkboxReplies: "div";
  replies: typeof AntdCheckbox;
  captionReplies2: "div";
  captionReplies: "div";
  sectionDatePosted: "div";
  sectionTitle3: "div";
  datePosted: typeof AntdRadioGroup;
  sectionSearch: "div";
  sectionTitle4: "div";
  searchBar: typeof AntdInput;
  sectionLanguages: "div";
  sectionTitle5: "div";
  language: typeof AntdRadioGroup;
  reset: typeof AntdButton;
  showFiltered: typeof AntdButton;
  button: "button";
  svg: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCompanyReviews__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCompanyReviews__VariantsArgs;
    args?: PlasmicCompanyReviews__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCompanyReviews__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicCompanyReviews__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCompanyReviews__ArgProps,
          internalVariantPropNames: PlasmicCompanyReviews__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCompanyReviews__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCompanyReviews";
  } else {
    func.displayName = `PlasmicCompanyReviews.${nodeName}`;
  }
  return func;
}

function withPlasmicPageGuard<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const PageGuard: React.FC<P> = props => (
    <PlasmicPageGuard__
      minRole={null}
      appId={"uzL7MLDrNkZiDQaUBve1wf"}
      authorizeEndpoint={"https://studio.plasmic.app/authorize"}
      canTriggerLogin={true}
    >
      <WrappedComponent {...props} />
    </PlasmicPageGuard__>
  );

  return PageGuard;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "uzL7MLDrNkZiDQaUBve1wf"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicCompanyReviews = Object.assign(
  // Top-level PlasmicCompanyReviews renders the root element
  withUsePlasmicAuth(withPlasmicPageGuard(makeNodeComponent("root"))),
  {
    // Helper components rendering sub-elements
    mainNavigation: makeNodeComponent("mainNavigation"),
    content: makeNodeComponent("content"),
    header: makeNodeComponent("header"),
    pathBreadcrumb: makeNodeComponent("pathBreadcrumb"),
    basicInfo: makeNodeComponent("basicInfo"),
    companyLogo: makeNodeComponent("companyLogo"),
    companyName: makeNodeComponent("companyName"),
    reviews: makeNodeComponent("reviews"),
    reviews2: makeNodeComponent("reviews2"),
    averageRating: makeNodeComponent("averageRating"),
    trustScore: makeNodeComponent("trustScore"),
    websiteAddressCard: makeNodeComponent("websiteAddressCard"),
    writeAReview: makeNodeComponent("writeAReview"),
    reviewsSummary: makeNodeComponent("reviewsSummary"),
    reviewsList: makeNodeComponent("reviewsList"),
    reviewCard: makeNodeComponent("reviewCard"),
    pagination: makeNodeComponent("pagination"),
    companyActivity: makeNodeComponent("companyActivity"),
    link: makeNodeComponent("link"),
    companyActivityTags: makeNodeComponent("companyActivityTags"),
    companyInfo: makeNodeComponent("companyInfo"),
    trustpilotExperience: makeNodeComponent("trustpilotExperience"),
    footer: makeNodeComponent("footer"),
    drawer: makeNodeComponent("drawer"),
    sectionRating: makeNodeComponent("sectionRating"),
    sectionTitle: makeNodeComponent("sectionTitle"),
    options2: makeNodeComponent("options2"),
    rating1: makeNodeComponent("rating1"),
    rating2: makeNodeComponent("rating2"),
    rating3: makeNodeComponent("rating3"),
    rating4: makeNodeComponent("rating4"),
    rating5: makeNodeComponent("rating5"),
    sectionRecommended: makeNodeComponent("sectionRecommended"),
    sectionTitle2: makeNodeComponent("sectionTitle2"),
    options: makeNodeComponent("options"),
    checkboxVerified: makeNodeComponent("checkboxVerified"),
    verified: makeNodeComponent("verified"),
    captionVerified2: makeNodeComponent("captionVerified2"),
    captionVerified: makeNodeComponent("captionVerified"),
    checkboxReplies: makeNodeComponent("checkboxReplies"),
    replies: makeNodeComponent("replies"),
    captionReplies2: makeNodeComponent("captionReplies2"),
    captionReplies: makeNodeComponent("captionReplies"),
    sectionDatePosted: makeNodeComponent("sectionDatePosted"),
    sectionTitle3: makeNodeComponent("sectionTitle3"),
    datePosted: makeNodeComponent("datePosted"),
    sectionSearch: makeNodeComponent("sectionSearch"),
    sectionTitle4: makeNodeComponent("sectionTitle4"),
    searchBar: makeNodeComponent("searchBar"),
    sectionLanguages: makeNodeComponent("sectionLanguages"),
    sectionTitle5: makeNodeComponent("sectionTitle5"),
    language: makeNodeComponent("language"),
    reset: makeNodeComponent("reset"),
    showFiltered: makeNodeComponent("showFiltered"),
    button: makeNodeComponent("button"),
    svg: makeNodeComponent("svg"),

    // Metadata about props expected for PlasmicCompanyReviews
    internalVariantProps: PlasmicCompanyReviews__VariantProps,
    internalArgProps: PlasmicCompanyReviews__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Company Reviews",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicCompanyReviews;
/* prettier-ignore-end */
